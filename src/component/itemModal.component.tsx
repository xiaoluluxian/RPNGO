/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Component set ComponentGhotiItemModal
 */

import * as React from 'react';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import { Dropdown, DropdownToggle, DropdownMenu, Modal, ModalDialog, ModalHeader, ModalTitle, ModalBody, ModalFooter } from 'reactstrap';

import Config from '../config/config';

import * as $ from "jquery";

export interface IProps {
    item: any;
    each: any;
    index: number;
    updateItemList: any;
    Tax: any;
    
}

export interface IState {

}

class ComponentGhotiItemModal extends React.Component<IProps, IState> {
    state = {
        show: false
    }
    public constructor(props) {
        super(props);
        this.changeShow = this.changeShow.bind(this);
        this.hideModal = this.hideModal.bind(this);
        this.addAfterPicture = this.addAfterPicture.bind(this);
        this.addBeforePicture = this.addBeforePicture.bind(this);
        this.addDuringPicture = this.addDuringPicture.bind(this);
    }

    public render() {
        return (<React.Fragment>
            <button style={{
                marginTop: '3px',
                marginLeft: '5px',
                fontSize: '14px',
                width: '65px',
                height: '29px',
            }}
                className={"btn btn-primary btn-sm"}
                onClick={this.changeShow}
                title="edit">Edit</button>
            <Modal isOpen={this.state.show} toggle={this.hideModal} size="lg">
                <ModalHeader toggle={this.hideModal}>{this.props.each.Cate} - {this.props.each.Item}</ModalHeader>
                <ModalBody>
                
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Category</span>
                        <input type="text" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                            id='cate' value={this.props.item[this.props.index].Cate}
                            style={{
                                color: "black",
                                // width:"99%"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].Cate = e.target.value;
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Item</span>
                        <input type="number" className="form-control" placeholder="Item..." aria-label="Item" aria-describedby="basic-addon1"
                            id='item' value={this.props.each.Item}
                            style={{
                                color: "black"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].Item = parseInt(e.target.value) || 0;
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "100px"
                            // fontSize:'13px'
                        }}>Description</span>
                        <textarea className="form-control" placeholder="Description..." aria-label="Description" aria-describedby="basic-addon1"
                            id='description' value={this.props.each.description}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].description = e.target.value;
                                this.props.updateItemList(list)
                            }}
                            style={{
                                // width: "425px",
                                height: "100px",
                                resize: "none"
                            }}>
                            ></textarea>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "100px"
                            // fontSize:'13px'
                        }}>DescriptionCN</span>
                        <textarea className="form-control" placeholder="DescriptionCN..." aria-label="DescriptionCN" aria-describedby="basic-addon1"
                            id='descriptionCN' value={this.props.each.description_cn}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].description_cn = e.target.value;
                                this.props.updateItemList(list)
                            }}
                            style={{
                                // width: "425px",
                                height: "100px",
                                resize: "none"
                            }}>
                            ></textarea>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "100px"
                            // fontSize:'13px'
                        }}>Comments</span>
                        <textarea className="form-control" placeholder="Comments..." aria-label="Comments" aria-describedby="basic-addon1"
                            id='comments' value={this.props.each.Comments}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].Comments = e.target.value;
                                this.props.updateItemList(list)
                            }}
                            style={{
                                // width: "425px",
                                height: "100px",
                                resize: "none"
                            }}>
                            ></textarea>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>QTY</span>
                        <input type="number" className="form-control" placeholder="Qty..." aria-label="Qty" aria-describedby="basic-addon1"
                            id='qty' value={this.props.each.Qty}
                            style={{
                                color: "black"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].Qty = parseInt(e.target.value) || 0;
                                list[this.props.index].Cost = list[this.props.index].Qty * list[this.props.index].PPU;
                                list[this.props.index].Tax = parseFloat((list[this.props.index].Qty * list[this.props.index].PPU * (parseFloat(this.props.Tax) / 100)).toFixed(2));
                                list[this.props.index].Amount = parseFloat(list[this.props.index].Tax + list[this.props.index].Cost);
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>UM</span>
                        <input type="text" className="form-control" placeholder="UM..." aria-label="UM" aria-describedby="basic-addon1"
                            id='um' value={this.props.each.UM}
                            style={{
                                color: "black"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].UM = e.target.value;
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>PPU</span>
                        <input type="number" className="form-control" placeholder="PPU..." aria-label="PPU" aria-describedby="basic-addon1"
                            id='ppu' value={this.props.each.PPU}
                            style={{
                                color: "black"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].PPU = parseFloat(e.target.value) || 0;
                                list[this.props.index].Cost = list[this.props.index].Qty * list[this.props.index].PPU;
                                list[this.props.index].Tax = parseFloat((list[this.props.index].Qty * list[this.props.index].PPU * (parseFloat(this.props.Tax) / 100)).toFixed(2));
                                list[this.props.index].Amount = parseFloat(list[this.props.index].Tax + list[this.props.index].Cost);
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>SubPPU</span>
                        <input type="number" className="form-control" placeholder="PPU..." aria-label="PPU" aria-describedby="basic-addon1"
                            id='ppu' value={this.props.each.SubPPU}
                            style={{
                                color: "black"
                            }}
                            onChange={e => {
                                let list = this.props.item;
                                list[this.props.index].SubPPU = parseFloat(e.target.value) || 0;
                                list[this.props.index].SubCost = list[this.props.index].Qty * list[this.props.index].SubPPU;
                                this.props.updateItemList(list)
                            }}
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Cost</span>
                        <input type="number" className="form-control" placeholder="Cost..." aria-label="Cost" aria-describedby="basic-addon1"
                            id='cost' value={this.props.each.Cost}
                            style={{
                                color: "black"
                            }}
                            disabled
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>SubCost</span>
                        <input type="number" className="form-control" placeholder="Cost..." aria-label="Cost" aria-describedby="basic-addon1"
                            id='cost' value={this.props.each.SubCost}
                            style={{
                                color: "black"
                            }}
                            disabled
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Tax</span>
                        <input type="number" className="form-control" placeholder="Cost..." aria-label="Cost" aria-describedby="basic-addon1"
                            id='cost' value={this.props.each.Tax}
                            style={{
                                color: "black"
                            }}
                            disabled
                        ></input>
                    </div>
                    <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                        <span className="input-group-text" id="basic-addon1" style={{
                            color: "black",
                            height: "31px"
                            // fontSize:'13px'
                        }}>Total</span>
                        <input type="number" className="form-control" placeholder="Cost..." aria-label="Cost" aria-describedby="basic-addon1"
                            id='cost' value={this.props.each.Amount}
                            style={{
                                color: "black"
                            }}
                            disabled
                        ></input>
                    </div>

                    <div style={{width:"30%", float:"left"}}className="card">
                        <div className="card-header">
                            <div className="input-group-prepend input-group-sm">
                                <span className="input-group-text">Before</span>
                                <div className="custom-file">
                                    <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                        onChange={(e) => { this.addBeforePicture(e.target.files, this.props.index, 0) }}></input>
                                    <label className="custom-file-label" ></label>
                                </div>
                            </div>
                        </div>
                        <div className="card-body">
                            {this.props.each.Before.map(function (pic, key) {
                                return (
                                    <React.Fragment key={key}>
                                        <div className="col-auto">
                                            <div className="input-group mb-2">
                                                <div className="input-group-prepend">
                                                    <button className="btn btn-danger"
                                                        onClick={() => {
                                                            let list = this.props.item;
                                                            list[this.props.index].Before.splice(key, 1);
                                                            this.props.updateItemList(list)
                                                        }}>Del:{key + 1}</button>
                                                </div>
                                                <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Name} disabled></input>
                                            </div>
                                        </div>
                                    </React.Fragment>
                                )
                            }.bind(this))}
                        </div>
                    </div>

                    <div className="card" style={{width:"30%", float:"left", marginLeft:"5%"}}>
                        <div className="card-header">
                            <div className="input-group-prepend input-group-sm">
                                <span className="input-group-text">During</span>
                                <div className="custom-file">
                                    <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                        onChange={(e) => { this.addDuringPicture(e.target.files, this.props.index, 0) }}></input>
                                    <label className="custom-file-label" ></label>
                                </div>
                            </div>
                        </div>
                        <div className="card-body">
                            {this.props.each.During.map(function (pic, key) {
                                return (
                                    <React.Fragment key={key}>
                                        <div className="col-auto">
                                            <div className="input-group mb-2">
                                                <div className="input-group-prepend">
                                                    <button className="btn btn-danger"
                                                        onClick={() => {
                                                            let list = this.props.item;
                                                            list[this.props.index].During.splice(key, 1);
                                                            this.props.updateItemList(list)
                                                        }}>Del:{key + 1}</button>
                                                </div>
                                                <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Name} disabled></input>
                                            </div>
                                        </div>
                                    </React.Fragment>
                                )
                            }.bind(this))}
                        </div>
                    </div>

                    <div className="card" style={{width:"30%", float:"left", marginLeft:"5%"}}>
                        <div className="card-header">
                            <div className="input-group-prepend input-group-sm">
                                <span className="input-group-text">After</span>
                                <div className="custom-file">
                                    <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                        onChange={(e) => { this.addAfterPicture(e.target.files, this.props.index, 0) }}></input>
                                    <label className="custom-file-label" ></label>
                                </div>
                            </div>
                        </div>
                        <div className="card-body">
                            {this.props.each.After.map(function (pic, key) {
                                return (
                                    <React.Fragment key={key}>
                                        <div className="col-auto">
                                            <div className="input-group mb-2">
                                                <div className="input-group-prepend">
                                                    <button className="btn btn-danger"
                                                        onClick={() => {
                                                            let list = this.props.item;
                                                            list[this.props.index].After.splice(key, 1);
                                                            this.props.updateItemList(list)
                                                        }}>Del:{key + 1}</button>
                                                </div>
                                                <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Name} disabled></input>
                                            </div>
                                        </div>

                                    </React.Fragment>
                                )
                            }.bind(this))}
                        </div>
                    </div>
                </ModalBody>
            </Modal>
        </React.Fragment>);
    }

    protected changeShow() {
        this.setState({ show: true })
    }

    protected hideModal() {
        this.setState({ show: false })
    }
    

    protected addAfterPicture(Files: FileList, index: number, temp: number) {

        if (Files.length == (temp + 1)) {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    console.log(result);
                    let list = this.props.item;
                    list[this.props.index].After.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list);
                }.bind(this),
            });
        }
        else {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    // console.log(result);
                    let list = this.props.item;
                    list[this.props.index].After.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list);
                    this.addAfterPicture(Files, index, temp + 1);
                }.bind(this),
            });
        }

    }

    protected addDuringPicture(Files: FileList, index: number, temp: number) {
        // console.log(Files);
        if (Files.length == (temp + 1)) {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    console.log(result);
                    let list = this.props.item;
                    list[this.props.index].During.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list)
                }.bind(this),
            });
        }
        else {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    // console.log(result);
                    let list = this.props.item;
                    list[this.props.index].During.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list)
                    this.addDuringPicture(Files, index, temp + 1);
                }.bind(this),
            });
        }
    }



    protected addBeforePicture(Files: FileList, index: number, temp: number) {

        if (Files.length == (temp + 1)) {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    console.log(result);
                    let list = this.props.item;
                    list[this.props.index].Before.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list)
                }.bind(this),
            });
        }
        else {
            var formData = new FormData();
            formData.append('image', Files[temp]);
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadImage',
                method: 'POST',
                enctype: 'multipart/form-data',
                dataType: 'json',
                fileElementId: 'file-input',
                cache: false,
                processData: false,
                contentType: false,
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                data: formData,
                success: function (result) {
                    // console.log(result);
                    let list = this.props.item;
                    list[this.props.index].Before.push({
                        Name: Files[temp].name,
                        Format: result.Format,
                        Cate: list[this.props.index].Cate,
                        itemId: list[this.props.index].Item,
                        Src: result.Src,
                        Type: result.Type
                    });
                    this.props.updateItemList(list)
                    this.addBeforePicture(Files, index, temp + 1);
                }.bind(this),
            });
        }

    }
}

export default ComponentGhotiItemModal;
