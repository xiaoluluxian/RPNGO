/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiEdittask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from '../func/logo';
import { Dropdown, DropdownToggle, DropdownMenu, Modal, ModalDialog, ModalHeader, ModalTitle, ModalBody, ModalFooter } from "reactstrap"

import Config from '../config/config';

import * as $ from "jquery";
import * as fs from 'fs';
import * as FileSaver from 'file-saver';
import * as Cheerio from "cheerio"
import * as PhotoSphereViewer from "photo-sphere-viewer";
import Slider from 'rc-slider'

export interface IProps {
    history: any
}

export interface IState {

}

const marks = {
    0: '0%',
    10: '10',
    20: '20',
    30: '30',
    40: '40',
    50: '50',
    60: '60',
    70: '70',
    80: '80',
    90: '90',
    100: '100%'
}

class PageGhotiEdittask extends React.Component<IProps, IState> {
    count: number = 0;
    height: number = 0
    reload: number = 0;
    state = {
        Loading: 0,
        pictureDDropdown: false,
        //page:null,
        Address: '',
        Area: '',
        BillTo: '',
        City: '',
        // State:'',
        // County:'',
        // ZipCode:'',
        CompletionDate: [],
        Desc: '',
        DescCN: '',
        Invoice: '',
        DueDate: [],
        InvoiceDate: '',
        Item: [],
        LBNum: '',
        Note: '',
        Stage: '',
        StartDate: '',
        Stories: '',
        TotalCost: '',
        TotalImage: 0,
        Year: '',
        AssetNum: '',
        uploadLink: '',
        Tax: '',
        Before: [],
        During: [],
        After: [],
        Username: [],
        alluser: [],
        TaskStatus: '',
        Client: '',
        ClientIcon: '',
        // test: 'test',
        // x: "a",
        CheckList: [],
        Comment: "",
        Markers: [],
        currImgID: "",





        //data: [],
    };
    public componentDidMount() {
        $.ajax({
            url: 'https://rpnserver.appspot.com/findTaskById?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                //let test: IPage=JSON.parse(result.toString);
                // console.log(test);
                console.log(result);
                // console.log(JSON.stringify(result));
                // let citylist = [];
                // citylist = result.City.split("/");
                // this.setState({
                //     State:citylist[0],
                //     County:citylist[1],
                //     City:citylist[2],
                //     ZipCode:citylist[3],
                // })
                this.setState({ City: result.City })
                this.setState({ Address: result.Address });
                this.setState({ Area: result.Area });
                this.setState({ BillTo: result.BillTo });

                this.setState({ CompletionDate: result.CompletionDate });
                this.setState({ Desc: result.Desc });
                this.setState({ DescCN: result.DescCN });
                this.setState({ Invoice: result.Invoice });
                this.setState({ DueDate: result.DueDate });
                this.setState({ InvoiceDate: result.InvoiceDate });
                this.setState({ Item: result.ItemList });
                this.setState({ LBNum: result.KeyCode });
                this.setState({ Note: result.Note });
                this.setState({ Stage: result.Stage });
                this.setState({ StartDate: result.StartDate });
                this.setState({ Stories: result.Stories });
                this.setState({ TotalCost: result.TotalCost });
                this.setState({ TotalImage: result.TotalImage });
                this.setState({ Year: result.Year });
                this.setState({ AssetNum: result.asset_num });
                this.setState({ uploadLink: result.upload_link });
                this.setState({ Tax: result.Tax });
                this.setState({ Username: result.Username });
                this.setState({ Client: result.Client });
                this.setState({ TaskStatus: result.TaskStatus });
                this.setState({ CheckList: result.CheckList });
                this.setState({ Comment: result.Comment });
                this.setState({ ClientIcon: result.ClientIcon })
                this.reload += 1;
                this.setState({ Loading: this.reload })


                //this.setState({ })                


            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpnserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=before',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                // console.log(JSON.stringify(result));
                this.setState({ Before: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                console.log(this.reload)
                this.setState({ Loading: this.reload })

            }).bind(this),
        });
        $.ajax({
            url: 'https://rpnserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=during',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ During: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })
                console.log(this.reload)

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpnserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=after',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ After: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })
                console.log(this.reload)

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpnserver.appspot.com/findAllUsers',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.reload += 1;
                this.setState({ alluser: result });
                this.setState({ Loading: this.reload })
                console.log(this.reload)
            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
    }

    public constructor(props) {
        super(props);
        this.mapItem = this.mapItem.bind(this);
        this.downloadItemPics = this.downloadItemPics.bind(this);
        this.initItem = this.initItem.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.showProcess = this.showProcess.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.showCurrStage = this.showCurrStage.bind(this);

        this.updateItemList = this.updateItemList.bind(this);

        this.submit = this.submit.bind(this);
    }

    public render() {
        this.height = window.innerHeight * 0.45;
        let taxTotal = 0;
        let TotalAmount = 0;
        for (let i of this.state.Item) {
            TotalAmount += (i.Amount ? i.Amount : 0);
            taxTotal += (i.Tax ? i.Tax : 0);
        }

        if (this.reload == 5) {
            if (localStorage.getItem("Authority") === "0") {
                return <div>client</div>
            }
            else if (localStorage.getItem("Authority") === "3" || "4" || "5") {
                return (<React.Fragment>
                    <div className="page">
                        {this.showLeftBar()}
                        <div className="editPage">
                            <div className="editContainer">
                                <div className="card shadow mb-4">
                                    <div className="card-header py-3">
                                        <div 
                                            className="left">
                                            <h4 style={{}}>{this.showCurrStage()} - {this.state.Username[parseInt(this.state.Stage)] ? this.state.Username[parseInt(this.state.Stage)] : void 0}</h4>

                                        </div>
                                    </div>
                                    <div className="card-body">
                                        <div className="editContainerTopLeft">
                                            <table className="editTableTop">
                                                <tbody>
                                                    <tr>
                                                        <th>Property Address</th><td>{this.state.Address}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Asset Number</th><td>{this.state.AssetNum}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Start Date</th><td>{this.state.StartDate[parseInt(this.state.Stage)] ? this.state.StartDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Due Date</th><td>{this.state.DueDate[parseInt(this.state.Stage)] ? this.state.DueDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Completion Date</th><td>{this.state.CompletionDate[parseInt(this.state.Stage)] ? this.state.CompletionDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>State/County/City/ZipCode</th><td>{this.state.City}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Lock Box Number</th><td>{this.state.LBNum}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Client</th><td>{this.state.Client}</td>
                                                    </tr>

                                                </tbody>
                                            </table>
                                        </div>
                                        <div className="editContainerTopRight">
                                            <table style={{ marginRight: "30px", float: "right" }} className="editTableTop">
                                                <tbody>
                                                    <tr>
                                                        <th>Description</th><td>{this.state.Desc}{this.state.DescCN ? "/" + this.state.DescCN : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Note</th><td>{this.state.Note}</td>
                                                    </tr>
                                                </tbody>

                                            </table>
                                        </div>
                                    </div>
                                </div>

                                {this.state.Item.map(this.mapItem)}
                                <div className="insert">
                                    <button className="btn btn-primary btn-sm" style={{
                                        marginLeft: '10px',
                                        marginBottom: "2%",
                                        width: '98%',
                                        height: '4%',
                                        fontSize: '14px',
                                    }}
                                        onClick={() => {
                                            let list = this.state.Item;
                                            list.push(this.initItem(list.length + 1));
                                            this.setState({ Item: list });
                                        }}>AddItem</button>
                                </div>
                            </div>

                        </div>
                    </div>
                </React.Fragment>);
            }
            else {
                return <div>No Permission</div>
            }

        }
        else {
            return (<React.Fragment>
                <div className="page">
                    {this.showLeftBar()}
                    <div style={{ float: "right", width: "85%", height: "100%" }}>
                        <div style={{ marginLeft: "49%", marginTop: "30%" }}>
                            <img style={{ marginLeft: "3%" }} src="https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/e7f0a5e2-6279-44df-8507-0a6a09dddc2f?generation=1553525595322811&alt=media" />
                            <div>Loading...</div>
                        </div>


                    </div>
                </div>
            </React.Fragment>);
        }

    }

    protected showCurrStage() {
        //console.log(this.state.Stage);

        if (this.state.Stage === '0') {
            return ("Initial");
        }
        else if (this.state.Stage === '1') {
            return ("Bid");
        }
        else if (this.state.Stage === '2') {
            return ("Work Order");
        }
        else if (this.state.Stage === '3') {
            return ("Invoice");
        }
        else if (this.state.Stage === '4') {
            return ("Pending Accounting Review")
        }
        else if (this.state.Stage === '5') {
            return ("Complete")
        }
        else if (this.state.Stage === '6') {
            return ("Archived")
        }
        else {
            return ("Unknown");
        }
    }
    protected initItem(index: number) {
        return {
            After: [],
            Amount: 0,
            Before: [],
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: 'New Item',
            Comments: '',
            Item: index,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,
            Pano: "",
            description_cn: "",
            measure: "",
            completeness: "0"
        }
    }

    protected updateItemList(list: any) {
        this.setState({ Item: list });
    }

    protected mapItem(value, index) {
        return (
            <div key={index}>

                <div className="insert">
                    <button className="btn btn-primary btn-sm" style={{
                        marginLeft: '10px',
                        marginBottom: "2%",
                        width: '98%',
                        height: '4%',
                        fontSize: '14px',
                    }}
                        onClick={() => {
                            let list = this.state.Item;
                            list.splice(index, 0, this.initItem(index + 1));
                            this.setState({ Item: list });
                        }}>AddItem</button>
                </div>
                <div className="card shadow mb-4" id={"each" + index}>
                    <div className="card-header py-3">
                        <div style={{

                        }}
                            className="left">
                            <h4 style={{}}>{this.state.Item[index].Cate} - {this.state.Item[index].Item}</h4>
                            <div style={{ float: "right", width: "30%", marginRight: "50px" }}>
                                <Slider dots min={0} marks={marks} step={10}
                                    onChange={
                                        function (num) {
                                            let list = this.state.Item;
                                            list.completeness = num + "";
                                            this.setState({ Item: list })
                                        }
                                    } defaultValue={this.state.Item[index].Completeness ? parseInt(this.state.Item[index].Completeness) : 0} />
                            </div>
                        </div>
                        <div className="right">
                            <button style={{
                                marginTop: '3px',
                                float: "left",
                                width: '65px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className="btn btn-danger btn-sm" onClick={() => {
                                    let list = this.state.Item;
                                    list.splice(index, 1);
                                    this.setState({ Item: list });
                                }} title="delete">Delete</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                fontSize: '14px',
                                width: '65px',
                                height: '29px',
                                // backgroundColor: this.state.Item[index].Taxable == true ? 'lightblue' : 'red'
                            }}
                                className={this.state.Item[index].Taxable == true ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"} onClick={() => {
                                    let list = this.state.Item;
                                    list[index].Taxable = !list[index].Taxable;
                                    if (list[index].Taxable === true) {
                                        list[index].Tax = parseFloat((list[index].Qty * list[index].PPU * (parseFloat(this.state.Tax) / 100)).toFixed(2));
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }
                                    else {
                                        list[index].Tax = 0;
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }

                                    // console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="tax">Tax</button>

                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                width: '69px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className={this.state.Item[index].Process === '0' ? "btn btn-outline-danger btn-sm" : "btn btn-outline-success btn-sm"} onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Process === '0') {
                                        list[index].Process = '1';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Process</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                width: '65px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className={
                                    this.state.Item[index].Status === '0' ? "btn btn-outline-warning btn-sm" : this.state.Item[index].Status === '1' ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"
                                } onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Status === '0') {
                                        list[index].Status = '1';
                                        this.setState({ Item: list });
                                    }
                                    else if (list[index].Status === '1') {
                                        list[index].Status = '-1';
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Status = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Status</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                fontSize: '14px',
                                width: '65px',
                                height: '29px',
                                // backgroundColor: this.state.Item[index].pano === "true" ? 'lightblue' : 'red'
                            }}
                                className={this.state.Item[index].pano === "true" ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"}
                                onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].pano === "true") {
                                        list[index].pano = "false";
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].pano = "true";
                                        this.setState({ Item: list });
                                    }
                                    // console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="pano">Is360</button>
                            <Component.itemModal item={this.state.Item} each={value} index={index} updateItemList={this.updateItemList.bind(this)} Tax={this.state.Tax} />
                            <button
                                style={{
                                    // paddingTop: '20px',
                                    marginTop: '3px',
                                    marginLeft: '5px',
                                    width: '76px',
                                    height: '29px',
                                    fontSize: '14px',
                                }}
                                className="btn btn-info btn-sm"
                                title="downloaditempics" onClick={this.downloadItemPics.bind(this, this.state.Item[index])}>ItemPics</button>
                        </div>
                    </div>
                    <div className="card-body">
                        <React.Fragment>
                            <table style={{ width: "100%" }}>
                                <thead>
                                    <tr key={index}>
                                        <th>Category</th>
                                        <th>Item</th>
                                        <th>Description</th>
                                        <th>UM</th>
                                        <th>QTY</th>
                                        <th>PPU</th>
                                        <th>Amount</th>
                                        {/* <th>Process</th>
                                    <th>Status</th> */}
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr key={index}>
                                        <td>{value.Cate}</td>
                                        <td>{value.Item}</td>
                                        <td>{value.description}<div>{value.Comments}</div></td>
                                        <td>{value.UM}</td>
                                        <td>{value.Qty}</td>
                                        <td>{value.PPU}</td>
                                        <td>{value.Cost}</td>
                                        {/* <td>{this.showProcess(value.Process)}</td>
                                        <td>{this.showStatus(value.Status)}</td> */}
                                    </tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={7}>Before </th></tr>
                                    <tr><td style={{ borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={7}>{this.mapPicture(value.Before, value.description, value.Comments)}</td></tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF" }} colSpan={7}> During </th></tr>
                                    <tr><td style={{ borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={7}>{this.mapPicture(value.During, value.description, value.Comments)}</td></tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF" }} colSpan={7}> After </th></tr>
                                    <tr><td style={{ borderTop: "#FFFFFF" }} colSpan={7}>{this.mapPicture(value.After, value.description, value.Comments)}</td></tr>
                                    {/* <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}}colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}} colSpan={6}>{this.mapPicture(value.Before, value.description, value.Comments)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF"}} colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}}colSpan={6}>{this.mapPicture(value.During, value.description, value.Comments)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF"}}colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderTop:"#FFFFFF"}}colSpan={6}>{this.mapPicture(value.After, value.description, value.Comments)}</td></tr> */}
                                </tbody></table>
                        </React.Fragment>
                    </div>
                </div>
            </div>
        )
    }




    protected mapPicture(picture: any[], desc: string, descCN: string) {
        if (localStorage.getItem("Authority") === '3') {
            return (
                picture.map(function (item, key) {
                    return (
                        <div key={key} style={{
                            // position: 'flex',
                            flex: 1,
                            // float:"left"
                            width: "20%",
                            display: "inline-block"
                        }}>
                            <div>
                                <img style={{
                                    width: '80%',
                                    height: 'auto',
                                    padding: '3px'
                                }}
                                    src={item.Src}
                                    onClick={this.convert360.bind(this, item)}
                                />
                                <div style={{ width: "97%" }}>{key + 1}.{desc}{descCN ? "/" + descCN : ""}</div>
                            </div>

                        </div>
                    )
                }.bind(this))
            )
        }
        else {

            return (
                picture.map(function (item, key) {
                    if (item.ImageID) {
                        return (
                            <div key={key} style={{
                                // position: 'flex',
                                flex: 1,
                                // float:"left"
                                width: "20%",
                                display: "inline-block"
                            }}>
                                <div>
                                    <img style={{
                                        width: '80%',
                                        height: 'auto',
                                        padding: '3px'
                                    }}
                                        src={item.Src}
                                        onClick={this.convert360.bind(this, item)}
                                    />
                                    <div style={{ width: "97%" }}>{key + 1}.{desc}{descCN ? "/" + descCN : ""}</div>
                                </div>

                            </div>
                        )
                    }
                    else {
                        return (
                            <div key={key} style={{
                                // position: 'flex',
                                flex: 1,
                                // float:"left"
                                width: "20%",
                                display: "inline-block"
                            }}>
                                <div>
                                    <img style={{
                                        width: '80%',
                                        height: 'auto',
                                        padding: '3px'
                                    }}
                                        src={item.Src}

                                    />
                                    <div style={{ width: "90%" }}>{key + 1}.{desc}{descCN ? "/" + descCN : ""}</div>
                                </div>

                            </div>
                        )
                    }

                }.bind(this))
            )
        }
    }

    protected convert360(item) {

    }

    protected showProcess(value) {
        if (value === '0') {
            return (<div>Incomplete</div>);
        }
        else {
            return (<div>Complete</div>);
        }
    }

    protected showStatus(value) {
        if (value === '0') {
            return "Unknown";
        }
        else if (value === '1') {
            return 'Approved';
        }
        else {
            return "Pushback";
        }
    }

    protected downloadItemPics(item) {

    }
    protected showTopBar() {
        return (
            <div className="topBar">
                <div className="searchBox">
                    <div className="input-group"
                        style={{
                            width: "50%",
                            paddingTop: "20px",
                            marginLeft: "40px",
                            // border:"1px solid black"
                        }}>
                        <input type="text" className="form-control bg-light border-0 small" placeholder="Search for Addr..." aria-label="Search" aria-describedby="basic-addon2"></input>
                        <div className="input-group-append">
                            <button className="btn btn-primary" type="button">
                                <i className="fas fa-search fa-sm"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div className="profileBox">
                    <div style={{
                        paddingTop: "5%"
                    }}>
                        <button className="link" style={{
                            width: "180px",
                            float: "right",
                            backgroundColor: "Transparent",
                            border: "none",
                            outline: "none"
                        }}>
                            <span style={{
                                color: "#616161"
                            }} className="mr-2 d-none d-lg-inline text-gray-600">Tim Yuan</span>
                            <img style={{
                                width: "20%"
                            }} className="img-profile rounded-circle" src={logo} />
                        </button>
                    </div>

                </div>
            </div>
        )
    }
    protected showLeftBar() {
        return (
            <div style={{ position: "fixed" }} className="wrapper">
                <div className="sidebar">
                    <div className="sidebar-header">
                        <button style={{
                            width: "100%",
                            backgroundColor: "Transparent",
                            border: "none",
                        }}>
                            <div className="logo">
                                <img style={{
                                    width: "100%"
                                }} src={logo} />
                            </div>
                            <div className="rpnname">
                                RPN Company
                            </div>
                        </button>
                    </div>
                    <div className="sidebar-body">

                        <div style={{
                            borderBottom: "1px solid #E5E5E5"
                        }} className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="link" style={{
                                    width: "100%",
                                    backgroundColor: "Transparent",
                                    border: "none",
                                    outline: "none"
                                }} onClick={function () { this.props.history.push("/main") }.bind(this)}>
                                    <div className="body-icon"><i style={{ color: "#616161" }} className="fas fa-tasks"></i></div>
                                    <div className="body-text">Dashboard</div>
                                </button>
                            </div>
                        </div>
                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    width: "100%",
                                }} onClick={this.submit}>Submit</button>
                            </div>
                        </div>
                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-info" style={{
                                    width: "100%",
                                }}>CheckList</button>
                            </div>
                        </div>

                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    width: "45%",
                                }}>PrintPDF</button>
                                <button className="btn btn-primary" style={{
                                    width: "45%",
                                    float: "right",
                                    // marginLeft:"5px"
                                }}>JSON</button>
                            </div>
                        </div>
                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    width: "45%",
                                }}>AddWHP</button>
                                <button className="btn btn-primary" style={{
                                    width: "45%",
                                    float: "right",
                                    // marginLeft:"5px"
                                }}>DelMark</button>
                            </div>
                        </div>

                        <div style={{
                            // borderBottom: "1px solid #E5E5E5"
                        }} className="sidebar-body-action">
                            <Dropdown style={{ paddingTop: "5%" }} isOpen={this.state.pictureDDropdown} toggle={function () { this.setState({ pictureDDropdown: !this.state.pictureDDropdown }) }.bind(this)}>
                                <DropdownToggle style={{ width: "100%" }} caret>
                                    DownloadPics
                                </DropdownToggle>
                                <DropdownMenu>
                                    <button className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5", borderTop: "1px solid #E5E5E5" }}>Before</button>
                                    <button className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5" }}>During</button>
                                    <button className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5" }}>After</button>
                                </DropdownMenu>
                            </Dropdown>
                        </div>
                        <div style={{ marginTop: "10px", overflow: "auto", height: this.height, boxShadow: "0 0 35px 10px #EBEDEF inset" }} className="sidebar-body-action">
                            {this.state.Item.map(function (item, index) {
                                return (
                                    <div key={index}><button className="btn btn-link btn-sm" style={{ color: this.stageColor(item) }} onClick={this.scrollToAnchor.bind(this, index)}>{item.Cate}-{item.Item}</button></div>
                                )
                            }.bind(this))}
                        </div>
                    </div>
                </div>
            </div>

        )
    }

    protected submit() {

    }

    protected stageColor(item: any) {
        if (item.Process === '0') {
            return "#A00A0A"
        }
        else if (item.Process === '1' && item.Status != '1') {
            return "#FFC107"
        }
        else {
            return "#18A409"
        }
    }

    protected scrollToAnchor(index: number) {
        let anchorElement = document.getElementById("each" + index);
        anchorElement.scrollIntoView({})

    }
}

export default PageGhotiEdittask;
