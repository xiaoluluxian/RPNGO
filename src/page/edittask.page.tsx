/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiEdittask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import logo from '../func/logo';
import { Dropdown, DropdownToggle, DropdownMenu, Modal, ModalDialog, ModalHeader, ModalTitle, ModalBody, ModalFooter } from "reactstrap"

import Config from '../config/config';
import * as VRM from './VRM'

import * as $ from "jquery";
import * as fs from 'fs';
import * as FileSaver from 'file-saver';
import * as Cheerio from "cheerio"
import * as PhotoSphereViewer from "photo-sphere-viewer";
import Slider from 'rc-slider'
import * as JSZip from "jszip"
import * as JSZipUtils from "jszip-utils"
import { createVerify } from 'crypto';

export interface IProps {
    history: any
}

export interface IState {

}

const marks = {
    0: '0%',
    10: '10',
    20: '20',
    30: '30',
    40: '40',
    50: '50',
    60: '60',
    70: '70',
    80: '80',
    90: '90',
    100: '100%'
}

class PageGhotiEdittask extends React.Component<IProps, IState> {
    count: number = 0;
    height: number = 0
    reload: number = 0;
    state = {
        Loading: 0,
        pictureDDropdown: false,
        changeStageModal: false,
        duplicateModal: false,
        generalModal: false,
        versionArray: [],
        //page:null,
        Address: '',
        Area: '',
        BillTo: '',
        City: '',
        // State:'',
        // County:'',
        // ZipCode:'',
        CompletionDate: [],
        Desc: '',
        DescCN: '',
        Invoice: '',
        DueDate: [],
        InvoiceDate: '',
        Item: [],
        LBNum: '',
        Note: '',
        Stage: '',
        StartDate: [],
        Stories: '',
        TotalCost: '',
        TotalImage: 0,
        Year: '',
        AssetNum: '',
        uploadLink: '',
        Tax: '',
        Before: [],
        During: [],
        After: [],
        Username: [],
        alluser: [],
        TaskStatus: '',
        Client: '',
        ClientIcon: '',
        Progress: "",
        Version: 0,
        VersionSize: 0,
        Vendor: "",
        SharedID: "",
        // test: 'test',
        // x: "a",
        CheckList: [],
        Comment: "",
        Markers: [],
        currImgID: "",
        currImgSrc: "",

        ClientApproval: [],
        SubWorkOrder: [],
        SubInvoice: [],
        Other: [],



        DupDescription: "",
        DupUsername: "",

        allVendors: [],
        alluserForVendor: []




        //data: [],
    };
    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findTaskById?task_id=' + localStorage.getItem("currTask"),
            //url: 'http://localhost:8080/login',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                console.log(result);
                this.setState({ City: result.City })
                this.setState({ Address: result.Address });
                this.setState({ Area: result.Area });
                this.setState({ BillTo: result.BillTo });
                this.setState({ CompletionDate: result.CompletionDate });
                this.setState({ Desc: result.Desc });
                this.setState({ DescCN: result.DescCN });
                this.setState({ Invoice: result.Invoice });
                this.setState({ DueDate: result.DueDate });
                this.setState({ InvoiceDate: result.InvoiceDate });
                this.setState({ Item: result.ItemList });
                this.setState({ LBNum: result.KeyCode });
                this.setState({ Note: result.Note });
                this.setState({ Stage: result.Stage });
                this.setState({ StartDate: result.StartDate });
                this.setState({ Stories: result.Stories });
                this.setState({ TotalCost: result.TotalCost });
                this.setState({ TotalImage: result.TotalImage });
                this.setState({ Year: result.Year });
                this.setState({ AssetNum: result.asset_num });
                this.setState({ uploadLink: result.upload_link });
                result.Tax ? this.setState({ Tax: result.Tax }) : this.setState({ Tax: "0" })
                this.setState({ Username: result.Username });
                this.setState({ Client: result.Client });
                this.setState({ TaskStatus: result.TaskStatus });
                this.setState({ CheckList: result.CheckList });
                this.setState({ Comment: result.Comment });
                this.setState({ ClientIcon: result.ClientIcon })
                this.setState({
                    Progress: result.Progress,
                    Version: result.Version,
                    VersionSize: result.VersionSize,
                    SharedID: result.SharedID,
                    DupDescription: result.Desc,
                    Vendor: result.Vendor,
                    SubWorkOrder: result.sub_work_order_pdf,
                    SubInvoice: result.SubInvoicePDF,
                    ClientApproval: result.ClientApproPDF,
                    Other: result.OtherPDF
                })
                // let temp = []
                // for (let i = result.VersionSize; i > 0; i--) {
                //     temp.push(i);
                // }
                // // console.log(temp)
                // this.setState({ versionArray: temp })
                this.reload += 1;
                this.setState({ Loading: this.reload })


                //this.setState({ })                


            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                // console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });

        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllVendors',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.setState({ allVendors: result });
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=before',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                // console.log(JSON.stringify(result));
                this.setState({ Before: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                // console.log(this.reload)
                this.setState({ Loading: this.reload })

            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=during',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ During: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })
                // console.log(this.reload)

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                // console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllImg?task_id=' + localStorage.getItem("currTask") + '&status=after',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            success: (function (result) {
                //console.log(result);
                // console.log(JSON.stringify(result));
                this.setState({ After: result });
                this.reload += 1;
                this.setState({ Loading: this.reload })
                // console.log(this.reload)

            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                // console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllUsers',
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.reload += 1;
                this.setState({ alluser: result });
                this.setState({ Loading: this.reload })
                // console.log(this.reload)
            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                this.reload += 1;
                // console.log(this.reload)
                this.setState({ Loading: this.reload })
            }).bind(this),
        });
        $.ajax({
            url: "https://rpntechserver.appspot.com/findVersionStatusBySharedId?shared_id=" + localStorage.getItem("currSharedID"),
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                this.setState({ versionArray: result })
            }).bind(this),
            error: (function (jqXHR, textStatus, errorThrown) {
                // console.log(errorThrown)
            }).bind(this),
        })
    }

    public constructor(props) {
        super(props);
        this.mapItem = this.mapItem.bind(this);
        this.downloadItemPics = this.downloadItemPics.bind(this);
        this.initItem = this.initItem.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.showProcess = this.showProcess.bind(this);
        this.mapPicture = this.mapPicture.bind(this);
        this.showCurrStage = this.showCurrStage.bind(this);
        this.showStage = this.showStage.bind(this);
        this.convert360 = this.convert360.bind(this);
        this.submit360 = this.submit360.bind(this);
        this.generateURL = this.generateURL.bind(this);
        this.addWHP = this.addWHP.bind(this);
        this.updateItemList = this.updateItemList.bind(this);
        this.pushPage = this.pushPage.bind(this)
        this.changeChecklist = this.changeChecklist.bind(this);
        this.uploadFile = this.uploadFile.bind(this)

        this.submit = this.submit.bind(this);
        this.submitStage = this.submitStage.bind(this);
        this.duplicateTask = this.duplicateTask.bind(this);
        this.getUserByVendor = this.getUserByVendor.bind(this);
        this.downloadFiles = this.downloadFiles.bind(this)
    }

    public render() {
        this.height = window.innerHeight * 0.4;
        let taxTotal = 0;
        let TotalAmount = 0;
        let SubTotal = 0;
        for (let i of this.state.Item) {
            TotalAmount += (i.Amount ? i.Amount : 0);
            SubTotal += (i.SubCost ? i.SubCost : 0);
            taxTotal += (i.Tax ? i.Tax : 0);
        }

        if (this.reload == 5) {
            if (localStorage.getItem("Authority") === "0") {
                return (
                    <React.Fragment>
                        <div className="page">
                            <Component.leftBar page="main" pushPage={this.pushPage.bind(this)} />
                            <div className="editPage">
                                <div className="editContainer">
                                    <div className="card shadow mb-4">

                                    </div>
                                </div>
                            </div>
                        </div>
                    </React.Fragment>
                )
            }
            else if (localStorage.getItem("Authority") === "3" || "4" || "5") {
                return (<React.Fragment>
                    <div className="page">
                        {this.showLeftBar(TotalAmount)}
                        <div className="editPage">
                            <div className="editContainer">
                                <div className="card shadow mb-4">
                                    <Modal isOpen={this.state.changeStageModal} toggle={e => { this.setState({ changeStageModal: false }) }} size="lg">
                                        <ModalHeader toggle={e => { this.setState({ changeStageModal: false }) }}>Change Stage</ModalHeader>
                                        <ModalBody>
                                            <div className="input-group-prepend">
                                                <span className="input-group-text">User To Remove</span>
                                                <div className="custom-file">
                                                    <input className="form-control" id="userToRemove" value={this.state.Username[parseInt(this.state.Stage)]} disabled></input>
                                                </div>
                                            </div>
                                            <div style={{ marginTop: "10px" }} className="input-group-prepend">
                                                <span className="input-group-text">Stage To</span>
                                                <div className="custom-file">
                                                    <input className="form-control" id="userToRemove" value={this.showCurrStage(this.state.Stage)} disabled></input>
                                                </div>
                                            </div>
                                            <div style={{ marginTop: "10px" }} className="input-group-prepend">
                                                <span className="input-group-text">User to Set</span>
                                                <div className="custom-file">
                                                    <select id="setUser" className="form-control">
                                                        {this.state.alluser.map(function (item, key) {
                                                            <option>ChooseUser</option>
                                                            return (
                                                                <option key={key}>{item.Username}</option>
                                                            )
                                                        }.bind(this))}
                                                    </select>
                                                </div>
                                            </div>
                                            <div style={{ marginTop: "10px" }} className="input-group-prepend">
                                                <span className="input-group-text">StartDate</span>
                                                <div className="custom-file">
                                                    <input type="date" value={this.state.StartDate[parseInt(this.state.Stage) - 1] ? this.state.StartDate[parseInt(this.state.Stage) - 1] : void 0} className="form-control" id="stageStartDate"></input>
                                                </div>
                                            </div>
                                            <div style={{ marginTop: "10px" }} className="input-group-prepend">
                                                <span className="input-group-text">DueDate</span>
                                                <div className="custom-file">
                                                    <input type="date" value={this.state.DueDate[parseInt(this.state.Stage) - 1] ? this.state.DueDate[parseInt(this.state.Stage) - 1] : void 0} className="form-control" id="stageDueDate" ></input>
                                                </div>
                                            </div>
                                            <button style={{
                                                marginLeft: "10px",
                                                marginTop: "10px",
                                                width: "80px",
                                                height: "35px"
                                            }}
                                                title="sbmit" onClick={this.submitStage}>Submit</button>
                                        </ModalBody>
                                    </Modal>
                                    <Modal isOpen={this.state.duplicateModal} toggle={e => { this.setState({ duplicateModal: false }) }} size="lg">
                                        <ModalHeader toggle={e => { this.setState({ duplicateModal: false }) }}>Duplicate Task</ModalHeader>
                                        <ModalBody>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "31px"
                                                    // fontSize:'13px'
                                                }}>Address</span>
                                                <input type="text" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                                                    id='cate' value={this.state.Address}
                                                    style={{
                                                        color: "black",
                                                        // width:"99%"
                                                    }}

                                                    disabled></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "31px"
                                                    // fontSize:'13px'
                                                }}>Asset Number</span>
                                                <input type="text" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                                                    id='cate' value={this.state.AssetNum}
                                                    style={{
                                                        color: "black",
                                                        // width:"99%"
                                                    }}

                                                    disabled></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "100px"
                                                    // fontSize:'13px'
                                                }}>Description</span>
                                                <textarea className="form-control" placeholder="Description..." aria-label="Description" aria-describedby="basic-addon1"
                                                    id='description' value={this.state.DupDescription}
                                                    onChange={e => {
                                                        this.setState({ DupDescription: e.target.value })
                                                    }}
                                                    style={{
                                                        // width: "425px",
                                                        height: "100px",
                                                        resize: "none"
                                                    }}>
                                                    ></textarea>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "31px"
                                                    // fontSize:'13px'
                                                }}>StartDate</span>
                                                <input type="date" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                                                    id='DupStartDate'

                                                    style={{
                                                        color: "black",
                                                        // width:"99%"
                                                    }}

                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "31px"
                                                    // fontSize:'13px'
                                                }}>DueDate</span>
                                                <input type="date" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                                                    id='DupDueDate'
                                                    style={{
                                                        color: "black",
                                                        // width:"99%"
                                                    }}

                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "0px" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "31px"
                                                    // fontSize:'13px'
                                                }}>Client</span>
                                                <input type="text" className="form-control" placeholder="Category..." aria-label="Category" aria-describedby="basic-addon1"
                                                    id='client' value={this.state.Client}
                                                    style={{
                                                        color: "black",
                                                        // width:"99%"
                                                    }}

                                                    disabled></input>
                                            </div>
                                            <div className="form-row" style={{ marginLeft: "10px" }}>

                                                <div className="form-group col-md-4">
                                                    <label>Vendor</label>
                                                    <select className="form-control" id='client' onChange={e => { this.getUserByVendor(e.target.value) }}>
                                                        <option>Choose Vendor</option>
                                                        {this.state.allVendors ? this.state.allVendors.map(function (item, key) {
                                                            return (
                                                                <option key={key}>{item.Company}</option>
                                                            )
                                                        }.bind(this)) : <div></div>}
                                                    </select>
                                                </div>
                                                <div className="form-group col-md-4">
                                                    <label>Vendor User</label>
                                                    <select className="form-control" id='client' onChange={e => { this.setState({ DupUsername: e.target.value }) }}>
                                                        <option>Choose User</option>
                                                        {this.state.alluser ? this.state.alluserForVendor.map(function (item, key) {
                                                            return (
                                                                <option key={key}>{item.Username}</option>
                                                            )
                                                        }.bind(this)) : <div></div>}
                                                    </select>
                                                </div>

                                                <button id="submit" type="submit" name="submit" style={{ marginBottom: "10px" }} className="btn btn-primary  col-md-8" onClick={this.duplicateTask} value="submit">Submit</button>

                                            </div>
                                        </ModalBody>
                                    </Modal>
                                    <Modal isOpen={this.state.generalModal} toggle={e => { this.setState({ generalModal: false }) }} size="lg">
                                        <ModalHeader toggle={e => { this.setState({ generalModal: false }) }}>General Info</ModalHeader>
                                        <ModalBody>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px",

                                                    // fontSize:'13px'
                                                }}>Property Address</span>
                                                <input type="text" className="form-control" placeholder="Address" aria-label="Property Address" aria-describedby="basic-addon1"
                                                    id='propaddr' value={this.state.Address}
                                                    onChange={e => this.setState({ Address: e.target.value })} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Asset Number</span>
                                                <input type="text" className="form-control" placeholder="Asset Number" aria-label="Asset Number" aria-describedby="basic-addon1"
                                                    id='assetnumber' value={this.state.AssetNum}
                                                    onChange={e => this.setState({ AssetNum: e.target.value })} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Invoice Number</span>
                                                <input type="text" className="form-control" placeholder="Invoice Number" aria-label="Invoice Number" aria-describedby="basic-addon1"
                                                    id='invoicenumber' value={this.state.Invoice}
                                                    onChange={e => { this.setState({ Invoice: e.target.value }) }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Start Date</span>
                                                <input type="date" className="form-control" placeholder="StartDate" aria-label="StartDate" aria-describedby="basic-addon1"
                                                    id='startdate' value={this.state.StartDate[parseInt(this.state.Stage)]}
                                                    onChange={e => {
                                                        let date = this.state.StartDate;
                                                        date[parseInt(this.state.Stage)] = e.target.value;
                                                        this.setState({ StartDate: date })
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Due Date</span>
                                                <input type="date" className="form-control" placeholder="DueDate" aria-label="DueDate" aria-describedby="basic-addon1"
                                                    id='duedate' value={this.state.DueDate[parseInt(this.state.Stage)]}
                                                    onChange={e => {
                                                        let date = this.state.DueDate;
                                                        date[parseInt(this.state.Stage)] = e.target.value;
                                                        this.setState({ DueDate: date })
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Complete Date</span>
                                                <input type="date" className="form-control" placeholder="CompletionDate" aria-label="CompletionDate" aria-describedby="basic-addon1"
                                                    id='completiondate' value={this.state.CompletionDate[parseInt(this.state.Stage)]}
                                                    onChange={e => {
                                                        let date = this.state.CompletionDate;
                                                        date[parseInt(this.state.Stage)] = e.target.value
                                                        this.setState({ CompletionDate: date });
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>

                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>City/State/County/Zip Code</span>
                                                <input autoComplete="false" type="text" className="form-control" placeholder="city/zip code"
                                                    value={this.state.City}
                                                    onChange={e => {
                                                        this.setState({ City: e.target.value });
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Lock Box Number</span>
                                                <input type="text" className="form-control" placeholder="lockboxnumber" aria-label="LockBoxNumber" aria-describedby="basic-addon1"
                                                    id='city' value={this.state.LBNum}
                                                    onChange={e => {
                                                        this.setState({ LBNum: e.target.value });
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Client</span>
                                                <input type="text" className="form-control" placeholder="client..." aria-label="Client" aria-describedby="basic-addon1"
                                                    id='client' value={this.state.Client} disabled
                                                    onChange={e => {
                                                        this.setState({ Client: e.target.value });
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "100px"
                                                    // fontSize:'13px'
                                                }}>Note</span>
                                                <textarea className="form-control" placeholder="Noteeeeeeeeeeeee..." aria-label="Note" aria-describedby="basic-addon1"
                                                    id='city' value={this.state.Note}
                                                    onChange={e => {
                                                        this.setState({ Note: e.target.value });
                                                    }} style={{
                                                        color: "black",
                                                        width: "100%",
                                                        height: "100px",
                                                        resize: "none"
                                                    }}
                                                ></textarea>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>Tax</span>
                                                <input type="text" className="form-control" placeholder="Enter Tax Please..." aria-label="Tax" aria-describedby="basic-addon1"
                                                    id='tax' value={this.state.Tax}
                                                    onChange={e => {
                                                        this.setState({ Tax: e.target.value });
                                                        let tempi = this.state.Item;
                                                        for (let i = 0; i < tempi.length; i++) {
                                                            tempi[i].Tax = parseFloat((tempi[i].Qty * tempi[i].PPU * (parseFloat(e.target.value) / 100)).toFixed(2));

                                                            tempi[i].Amount = parseFloat((parseFloat(tempi[i].Tax) + parseFloat(tempi[i].Cost)).toFixed(2));
                                                            // console.log(tempi[i].Amount);

                                                        }
                                                        this.setState({ Item: tempi });
                                                    }} style={{ color: "black" }}
                                                ></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "29px"
                                                    // fontSize:'13px'
                                                }}>BillTo</span>
                                                <input type="text" className="form-control" placeholder="bill to..." aria-label="BillTo" aria-describedby="basic-addon1"
                                                    id='billto' value={this.state.Client}
                                                    onChange={e => {
                                                        this.setState({ BillTo: e.target.value });
                                                    }} style={{ color: "black" }}
                                                    disabled></input>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "100px"
                                                    // fontSize:'13px'
                                                }}>Description</span>
                                                <textarea className="form-control" placeholder="Description..." aria-label="Description" aria-describedby="basic-addon1"
                                                    id='description' value={this.state.Desc}
                                                    onChange={e => {
                                                        this.setState({ Desc: e.target.value });
                                                    }} style={{
                                                        color: "black",
                                                        width: "100%",
                                                        height: "100px",
                                                        resize: "none"
                                                    }}
                                                ></textarea>
                                            </div>
                                            <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                <span className="input-group-text" id="basic-addon1" style={{
                                                    color: "black",
                                                    height: "100px"
                                                    // fontSize:'13px'
                                                }}>DescriptionCN</span>
                                                <textarea className="form-control" placeholder="DescriptionCN..." aria-label="DescriptionCN" aria-describedby="basic-addon1"
                                                    id='descriptionCN' value={this.state.DescCN}
                                                    onChange={e => {
                                                        this.setState({ DescCN: e.target.value });
                                                    }} style={{
                                                        color: "black",
                                                        width: "100%",
                                                        height: "100px",
                                                        resize: "none"
                                                    }}
                                                ></textarea>
                                            </div>
                                            <div style={{}} className="card">
                                                <div className="card-header">
                                                    <div className="input-group-prepend input-group-sm">
                                                        <button className="btn btn-info"
                                                            onClick={() => {
                                                                this.downloadFiles("client_appro_pdf")
                                                            }}>Download</button>
                                                        <div className="custom-file">
                                                            <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                                                onChange={(e) => this.uploadFile(e.target.files, "client_appro_pdf")}></input>
                                                            <label className="custom-file-label" >Upload Client Approval File</label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="card-body">
                                                    {this.state.ClientApproval ? this.state.ClientApproval.map(function (pic, key) {
                                                        return (
                                                            <React.Fragment key={key}>
                                                                <div className="col-auto">
                                                                    <div className="input-group mb-2">
                                                                    {localStorage.getItem("Authority")==="5"?<div className="input-group-prepend">
                                                                            <button className="btn btn-danger"
                                                                                onClick={() => {
                                                                                    let list = this.state.ClientApproval;
                                                                                    list.splice(key, 1);
                                                                                    this.setState({ ClientApproval: list });
                                                                                }}>Del:{key + 1}</button>
                                                                        </div>: void 0}
                                                                        <div className="input-group-prepend">
                                                                            <button className="btn btn-info"
                                                                                onClick={() => {
                                                                                    this.downloadSingleFile(this.state.ClientApproval[key])
                                                                                }}>Download:{key + 1}</button>
                                                                        </div>
                                                                        <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Filename} disabled></input>
                                                                    </div>
                                                                </div>
                                                            </React.Fragment>
                                                        )
                                                    }.bind(this)) : void 0}
                                                </div>
                                            </div>

                                            <div style={{}} className="card">
                                                <div className="card-header">
                                                    <div className="input-group-prepend input-group-sm">
                                                        <button className="btn btn-info"
                                                            onClick={() => {
                                                                this.downloadFiles("sub_work_order_pdf")
                                                            }}>Download</button>
                                                        <div className="custom-file">
                                                            <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                                                onChange={(e) => this.uploadFile(e.target.files, "sub_work_order_pdf")}></input>
                                                            <label className="custom-file-label" >Upload Sub WorkOrder File</label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="card-body">
                                                    {this.state.SubWorkOrder ? this.state.SubWorkOrder.map(function (pic, key) {
                                                        return (
                                                            <React.Fragment key={key}>
                                                                <div className="col-auto">
                                                                    <div className="input-group mb-2">
                                                                    {localStorage.getItem("Authority")==="5"?<div className="input-group-prepend">
                                                                            <button className="btn btn-danger"
                                                                                onClick={() => {
                                                                                    let list = this.state.SubWorkOrder;
                                                                                    list.splice(key, 1);
                                                                                    this.setState({ SubWorkOrder: list });
                                                                                }}>Del:{key + 1}</button>
                                                                        </div>: void 0}
                                                                        <div className="input-group-prepend">
                                                                            <button className="btn btn-info"
                                                                                onClick={() => {
                                                                                    this.downloadSingleFile(this.state.SubWorkOrder[key])
                                                                                }}>Download:{key + 1}</button>
                                                                        </div>
                                                                        <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Filename} disabled></input>
                                                                    </div>
                                                                </div>
                                                            </React.Fragment>
                                                        )
                                                    }.bind(this)) : void 0}
                                                </div>
                                            </div>
                                            <div style={{}} className="card">
                                                <div className="card-header">
                                                    <div className="input-group-prepend input-group-sm">
                                                        <button className="btn btn-info"
                                                            onClick={() => {
                                                                this.downloadFiles("sub_invoice_pdf")
                                                            }}>Download</button>
                                                        <div className="custom-file">
                                                            <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                                                onChange={(e) => this.uploadFile(e.target.files, "sub_invoice_pdf")}></input>
                                                            <label className="custom-file-label" >Upload Sub Invoice</label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="card-body">
                                                    {this.state.SubInvoice ? this.state.SubInvoice.map(function (pic, key) {
                                                        return (
                                                            <React.Fragment key={key}>
                                                                <div className="col-auto">
                                                                    <div className="input-group mb-2">
                                                                    {localStorage.getItem("Authority")==="5"?<div className="input-group-prepend">
                                                                            <button className="btn btn-danger"
                                                                                onClick={() => {
                                                                                    let list = this.state.SubInvoice;
                                                                                    list.splice(key, 1);
                                                                                    this.setState({ SubInvoice: list });
                                                                                }}>Del:{key + 1}</button>
                                                                        </div>: void 0}
                                                                        <div className="input-group-prepend">
                                                                            <button className="btn btn-info"
                                                                                onClick={() => {
                                                                                    this.downloadSingleFile(this.state.SubInvoice[key])
                                                                                }}>Download:{key + 1}</button>
                                                                        </div>
                                                                        <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Filename} disabled></input>
                                                                    </div>
                                                                </div>
                                                            </React.Fragment>
                                                        )
                                                    }.bind(this)) : void 0}
                                                </div>
                                            </div>
                                            <div style={{}} className="card">
                                                <div className="card-header">
                                                    <div className="input-group-prepend input-group-sm">
                                                        <button className="btn btn-info"
                                                            onClick={() => {
                                                                this.downloadFiles("other_pdf")
                                                            }}>Download</button>
                                                        <div className="custom-file">
                                                            <input type="file" className="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" multiple
                                                                onChange={(e) => this.uploadFile(e.target.files, "other_pdf")}></input>
                                                            <label className="custom-file-label" >Upload Other File</label>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div className="card-body">
                                                    {this.state.Other ? this.state.Other.map(function (pic, key) {
                                                        return (
                                                            <React.Fragment key={key}>
                                                                <div className="col-auto">
                                                                    <div className="input-group mb-2">
                                                                    {localStorage.getItem("Authority")==="5"?<div className="input-group-prepend">
                                                                            <button className="btn btn-danger"
                                                                                onClick={() => {
                                                                                    let list = this.state.Other;
                                                                                    list.splice(key, 1);
                                                                                    this.setState({ Other: list });
                                                                                }}>Del:{key + 1}</button>
                                                                        </div>: void 0}
                                                                        <div className="input-group-prepend">
                                                                            <button className="btn btn-info"
                                                                                onClick={() => {
                                                                                    this.downloadSingleFile(this.state.Other[key])
                                                                                }}>Download:{key + 1}</button>
                                                                        </div>
                                                                        <input type="text" className="form-control" id="inlineFormInputGroup" value={pic.Filename} disabled></input>
                                                                    </div>
                                                                </div>
                                                            </React.Fragment>
                                                        )
                                                    }.bind(this)) : void 0}
                                                </div>
                                            </div>
                                        </ModalBody>
                                    </Modal>
                                    <div className="card-header py-3">
                                        <div
                                            className="left">
                                            <h4 style={{}}>{this.showCurrStage(this.state.Stage)} - {this.state.Username[parseInt(this.state.Stage)] ? this.state.Username[parseInt(this.state.Stage)] : void 0}</h4>
                                            <button style={{
                                                marginTop: '3px',
                                                marginLeft: '5px',
                                                fontSize: '14px',
                                                width: '65px',
                                                height: '29px',
                                                // backgroundColor: this.state.Item[index].pano === "true" ? 'lightblue' : 'red'
                                            }}
                                                className={"btn btn-primary btn-sm"}
                                                onClick={() => this.setState({ generalModal: true })}
                                                title="edit">Edit</button>
                                            {this.state.Stage === "3" ? <button style={{
                                                marginTop: '3px',
                                                marginLeft: '5px',
                                                fontSize: '14px',

                                                height: '29px',
                                                // backgroundColor: this.state.Item[index].pano === "true" ? 'lightblue' : 'red'
                                            }}
                                                className={"btn btn-primary btn-sm"}
                                                onClick={() => this.props.history.push("/printSub")}
                                                title="edit">PrintSub</button> : void 0}

                                        </div>
                                    </div>
                                    <div className="card-body">
                                        <div className="editContainerTopLeft">
                                            <table className="editTableTop">
                                                <tbody>
                                                    <tr>
                                                        <th>Property Address</th><td>{this.state.Address}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Asset Number</th><td>{this.state.AssetNum}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Start Date</th><td>{this.state.StartDate[parseInt(this.state.Stage)] ? this.state.StartDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Due Date</th><td>{this.state.DueDate[parseInt(this.state.Stage)] ? this.state.DueDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Completion Date</th><td>{this.state.CompletionDate[parseInt(this.state.Stage)] ? this.state.CompletionDate[parseInt(this.state.Stage)] : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>State/County/City/ZipCode</th><td>{this.state.City}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Lock Box Number</th><td>{this.state.LBNum}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Client</th><td>{this.state.Client}</td>
                                                    </tr>

                                                </tbody>
                                            </table>
                                        </div>
                                        <div className="editContainerTopRight">
                                            <table style={{ marginRight: "30px", float: "right" }} className="editTableTop">
                                                <tbody>
                                                    <tr>
                                                        <th>Invoice Number</th><td>{this.state.Invoice}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Description</th><td>{this.state.Desc}{this.state.DescCN ? "/" + this.state.DescCN : void 0}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Note</th><td>{this.state.Note}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Tax</th><td>{this.state.Tax}%</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Total Tax</th><td>${taxTotal}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Total Amount</th><td>${TotalAmount}</td>
                                                    </tr>
                                                    <tr>
                                                        <th>Sub Amount</th><td>${SubTotal}</td>
                                                    </tr>
                                                </tbody>

                                            </table>
                                        </div>
                                    </div>
                                </div>

                                {this.state.Item.map(this.mapItem)}
                                <div className="insert">
                                    <button className="btn btn-primary btn-sm" style={{
                                        marginLeft: '10px',
                                        marginBottom: "2%",
                                        width: '98%',
                                        height: '4%',
                                        fontSize: '14px',
                                    }}
                                        onClick={() => {
                                            let list = this.state.Item;
                                            list.push(this.initItem(list.length + 1));
                                            for (let i = 0; i < list.length; i++) {
                                                list[i].Item = i + 1;
                                            }
                                            this.setState({ Item: list });
                                        }}>AddItem</button>
                                </div>
                            </div>

                        </div>
                        <div id="sphere" className="sphere">
                            <div className="sphere-content">
                                <span className="closep">&times;</span>

                                <div style={{
                                    float: "left",
                                    width: "35%",
                                    height: "90%",
                                    overflow: "scroll",
                                    marginTop: "3%",
                                }}>
                                    <div className="form-group" style={{
                                        width: "99%"
                                    }}>
                                        {this.state.Markers.length == 0 ? <div></div> : this.state.Markers.map(function (item, key) {
                                            return (
                                                <div className="input-group-prepend input-group-sm" style={{ marginBottom: "2px", width: "99%" }}>
                                                    <span className="input-group-text" id="basic-addon1" style={{
                                                        color: "black",
                                                        height: "100px"
                                                        // fontSize:'13px'
                                                    }}>Description{key + 1}</span>
                                                    <textarea className="form-control" placeholder="Description..." aria-label="Description" aria-describedby="basic-addon1"
                                                        id='description' value={item.Description}
                                                        onChange={e => {
                                                            let list = this.state.Markers;
                                                            list[key].Description = e.target.value;
                                                            this.setState({ Markers: list });
                                                        }} style={{
                                                            color: "black",
                                                            width: "100%",
                                                            height: "100px",
                                                            resize: "none"
                                                        }}
                                                    ></textarea>
                                                </div>
                                            )
                                        }.bind(this))}

                                    </div>
                                    <div className="form-group row" style={{
                                        width: "50%"
                                    }}>
                                        <div className="col-sm-10">
                                            <button onClick={this.submit360} className="btn btn-primary">Submit</button>
                                            <button style={{ marginLeft: "10px" }} onClick={this.generateURL} className="btn btn-info">URL</button>
                                        </div>

                                    </div>
                                </div>

                                <div id="spherepic" style={{
                                    float: "right",
                                    width: "60%",
                                    height: "90%"
                                }}></div>
                                <div style={{
                                    position: "relative",
                                    marginTop: "45px",
                                }}></div>


                            </div>

                        </div>
                    </div>
                </React.Fragment>);
            }
            else {
                return <div>No Permission</div>
            }

        }
        else {
            return (<React.Fragment>
                <div className="page">
                    {this.showLeftBar(TotalAmount)}
                    <div style={{ float: "right", width: "85%", height: "100%" }}>
                        <div style={{ marginLeft: "49%", marginTop: "30%" }}>
                            <img style={{ marginLeft: "3%" }} src="https://www.googleapis.com/download/storage/v1/b/post-images-rpntech/o/e7f0a5e2-6279-44df-8507-0a6a09dddc2f?generation=1553525595322811&alt=media" />
                            <div>Loading...</div>
                        </div>


                    </div>
                </div>
            </React.Fragment>);
        }

    }

    protected downloadSingleFile(file:any){
        FileSaver.saveAs(file.Src,file.Filename)
    }

    protected downloadFiles(type: string) {
        function urlToPromise(url) {
            // console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }

        var zip = new JSZip();


        // find every checked item

        if (type === "client_appro_pdf") {

            this.state.ClientApproval.forEach(function (url) {
                console.log(url);

                // filename = filename.replace("+","%20")
                zip.file(url.Filename, urlToPromise(url.Src), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
            })
                .then(function callback(blob) {
                    FileSaver.saveAs(blob, add + "_" + "ClientApproval" + ".zip");
                }, function (e) {

                });

            return false;
        }
        else if (type === "sub_work_order_pdf") {

            this.state.SubWorkOrder.forEach(function (url) {
                // console.log(url);

                // filename = filename.replace("+","%20")
                zip.file(url.Filename, urlToPromise(url.Src), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
            })
                .then(function callback(blob) {
                    FileSaver.saveAs(blob, add + "_" + "SubWorkOrder" + ".zip");
                }, function (e) {

                });

            return false;
        }
        else if (type === "sub_invoice_pdf") {

            this.state.SubInvoice.forEach(function (url) {

                zip.file(url.Filename, urlToPromise(url.Src), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
            })
                .then(function callback(blob) {
                    FileSaver.saveAs(blob, add + "_" + "SubInvoice" + ".zip");
                }, function (e) {

                });

            return false;
        }
        else {

            this.state.Other.forEach(function (url) {
                zip.file(url.Filename, urlToPromise(url.Src), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
            })
                .then(function callback(blob) {
                    FileSaver.saveAs(blob, add + "_" + "Other" + ".zip");
                }, function (e) {

                });

            return false;
        }

    }

    protected uploadFile(files: FileList, type: string) {
        for (let i = 0; i < files.length; i++) {
            var fd = new FormData();
            fd.append("doc", files[i]);
            fd.append("task_id", localStorage.getItem("currTask"))
            fd.append("file_class", type)
            $.ajax({
                url: 'https://rpntechserver.appspot.com/uploadDocToTask',
                method: 'POST',
                datatype: "json",
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                cache: false,
                processData: false,
                contentType: false,
                data: fd,
                success: function (data) {
                    console.log(data);
                    if (type === "client_appro_pdf") {
                        let temp = this.state.ClientApproval
                        temp.push(data);
                        this.setState({ ClientApproval: temp })
                    }
                    else if (type === "sub_work_order_pdf") {
                        let temp = this.state.SubWorkOrder
                        temp.push(data);
                        this.setState({ SubWorkOrder: temp })
                    }
                    else if (type === "sub_invoice_pdf") {
                        let temp = this.state.SubInvoice
                        temp.push(data);
                        this.setState({ SubInvoice: temp })
                    }
                    else {
                        let temp = this.state.Other
                        temp.push(data);
                        this.setState({ Other: temp })
                    }
                }.bind(this),
            });
        }

    }

    protected duplicateTask() {
        let CompletionDate = new Array(7);
        let name = [];
        name.push(this.state.DupUsername);
        let StartDate = new Array(7);
        StartDate[0] = $('#DupStartDate').val();
        let DueDate = new Array(7);
        DueDate[0] = $('#DupDueDate').val();
        // let citylist=$('#state').val()+"/"+$('#county').val()+"/"+$('#city').val()+"/"+$('#zipcode').val();

        $.ajax({
            url: 'https://rpntechserver.appspot.com/duplicateTask?shared_id=' + this.state.SharedID,
            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                asset_num: this.state.AssetNum,
                StartDate: StartDate,
                DueDate: DueDate,
                CompletionDate: CompletionDate,
                City: this.state.City,
                Address: this.state.Address,
                Desc: this.state.DupDescription,
                Keycode: this.state.LBNum,
                Client: this.state.Client,
                Username: name,
                //stage:$('#stage').val()
            }),
            success: function (data) {
                // console.log(data);
                alert("Dupicate Successfully!")
                window.location.reload()

            }.bind(this),
        });
    }
    protected addWHP() {
        let list = this.state.Item;
        let WHP = {
            After: [],
            Amount: 0,
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: 'WholeHousePhotos',
            Comments: '',
            Item: 1,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,
            completeness: "0",
            SubCost: 0,
            SubPPU: 0,

            Before: []
        }
        list.push(WHP);
        this.setState({ Item: list });
    }
    protected pushPage(page: String) {
        this.props.history.push(page)
    }

    protected getUserByVendor(vendor: string) {
        let name = vendor.replace(" ", "%20")
        name = name.replace("&", "%26")
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findUsersByCompany?company=' + name,
            method: 'GET',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },

            success: function (data) {
                console.log(data);
                this.setState({ alluserForVendor: data })

            }.bind(this),
        });
    }

    protected submitStage() {
        let StartDate = this.state.StartDate;
        StartDate[parseInt(this.state.Stage)] = $("#stageStartDate").val();
        let DueDate = this.state.DueDate;
        DueDate[parseInt(this.state.Stage)] = $("#stageDueDate").val();
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask") + "&shared_id=" + this.state.SharedID,

            method: 'POST',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            data: JSON.stringify({
                Address: this.state.Address,
                Area: this.state.Area,
                billTo: this.state.BillTo,
                City: this.state.City,
                CompletionDate: this.state.CompletionDate,
                Desc: this.state.Desc,
                Invoice: this.state.Invoice,
                InvoiceDate: this.state.InvoiceDate,
                DueDate: DueDate,
                ItemList: this.state.Item,
                KeyCode: this.state.LBNum,
                Note: this.state.Note,
                Stage: this.state.Stage,
                StartDate: StartDate,
                Stories: this.state.Stories,
                TotalCost: this.state.TotalCost,
                TotalImage: this.state.TotalImage,
                Year: this.state.Year,
                asset_num: this.state.AssetNum,
                upload_link: this.state.uploadLink,
                Tax: this.state.Tax,
                Username: this.state.Username,
                TaskStatus: this.state.TaskStatus,
                Client: this.state.Client,
                CheckList: this.state.CheckList,
                Comment: this.state.Comment,
                ClientIcon: this.state.ClientIcon,
                Version: this.state.Version,
                Progress: this.state.Progress,
                VersionSize: this.state.VersionSize,
                Vendor: this.state.Vendor,
                ClientApproPDF: this.state.ClientApproval,
                OtherPDF: this.state.Other,
                SubInvoicePDF: this.state.SubInvoice,
                sub_work_order_pdf: this.state.SubWorkOrder

            }),
            success: function (data) {
                var fd = new FormData();
                var newname = $('#setUser').val();
                if (this.state.Username[parseInt(this.state.Stage)] === undefined) {

                    fd.append('userToAdd', newname);
                    fd.append('task_id', localStorage.getItem('currTask'));
                    fd.append('shared_id', this.state.SharedID);
                    fd.append('stage', this.state.Stage);
                }
                else {
                    fd.append('userToRemove', this.state.Username[parseInt(this.state.Stage)]);
                    fd.append('userToAdd', newname);
                    fd.append('task_id', localStorage.getItem('currTask'));
                    fd.append('shared_id', this.state.SharedID);
                    fd.append('stage', this.state.Stage);
                }

                $.ajax({
                    url: 'https://rpntechserver.appspot.com/addTaskToUser',
                    //url: 'http://192.168.0.66:8080/addTaskToUserII?userToRemove='+this.state.oldUser+'&userToAdd='+$('#setUser').val()+'&task_id='+localStorage.getItem('currTask'),
                    method: 'POST',
                    dataType: 'json',
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    cache: false,
                    processData: false,
                    contentType: false,
                    data: fd,
                    success: function (data) {
                        alert("Submit Successfully!")
                        window.location.reload()
                    }.bind(this),
                });
            }.bind(this),
        });
    }

    protected showCurrStage(stage) {
        //console.log(this.state.Stage);

        if (stage === '0') {
            return ("Initial");
        }
        else if (stage === '1') {
            return ("Bid");
        }
        else if (stage === '2') {
            return ("Client Approval");
        }
        else if (stage === '3') {
            return ("Work Order");
        }
        else if (stage === '4') {
            return ("Quality Assurance")
        }
        else if (stage === '5') {
            return ("Invoice")
        }
        else if (stage === '6') {
            return ("Archived")
        }
        else {
            return ("Unknown");
        }
    }
    protected showStage() {
        return (
            <select value={this.state.Stage} style={{ marginTop: "10px" }} id='setStage' className="form-control" onChange={e => this.setState({ changeStageModal: true, Stage: e.target.value })}>
                <option value="0">Initial</option>
                <option value="1">Bid</option>
                <option value="2">Client Approval</option>
                <option value="3">Work Order</option>
                <option value="4">Quality Assurance</option>
                <option value="5">Invoice</option>
                <option value="6">Archived</option>
            </select>
        )

    }
    protected initItem(index: number) {
        return {
            After: [],
            Amount: 0,
            Before: [],
            During: [],
            Process: '0',
            Status: '0',
            Tax: 0,
            Taxable: true,
            description: '',
            Cate: 'New Item',
            Comments: '',
            Item: index,
            Qty: 0,
            UM: '',
            PPU: 0,
            Cost: 0,
            SubCost: 0,
            SubPPU: 0,
            Pano: "",
            description_cn: "",
            measure: "",
            completeness: "0"
        }
    }

    protected updateItemList(list: any) {
        this.setState({ Item: list });
    }

    protected mapItem(value, index) {
        return (
            <div key={index}>

                <div className="insert">
                    <button className="btn btn-primary btn-sm" style={{
                        marginLeft: '10px',
                        marginBottom: "2%",
                        width: '98%',
                        height: '4%',
                        fontSize: '14px',
                    }}
                        onClick={() => {
                            let list = this.state.Item;
                            list.splice(index, 0, this.initItem(index + 1));
                            for (let i = 0; i < list.length; i++) {
                                list[i].Item = i + 1;
                            }
                            this.setState({ Item: list });
                        }}>AddItem</button>
                </div>
                <div className="card shadow mb-4" id={"each" + index}>
                    <div className="card-header py-3">
                        <div style={{

                        }}
                            className="left">
                            <h4 style={{}}>{this.state.Item[index].Cate} - {this.state.Item[index].Item}</h4>
                            <div style={{ float: "right", width: "30%", marginRight: "50px" }}>
                                <Slider dots min={0} marks={marks} step={10}
                                    onChange={
                                        function (num) {
                                            let list = this.state.Item;
                                            list[index].completeness = num.toString();
                                            this.setState({ Item: list })
                                        }.bind(this)
                                    } defaultValue={this.state.Item[index].completeness ? parseInt(this.state.Item[index].completeness) : 0} />
                            </div>
                        </div>
                        <div className="right">
                            <button style={{
                                marginTop: '3px',
                                float: "left",
                                width: '65px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className="btn btn-danger btn-sm" onClick={() => {
                                    let list = this.state.Item;
                                    list.splice(index, 1);
                                    for (let i = 0; i < list.length; i++) {
                                        list[i].Item = i + 1;
                                    }
                                    this.setState({ Item: list });
                                }} title="delete">Delete</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                fontSize: '14px',
                                width: '65px',
                                height: '29px',
                                // backgroundColor: this.state.Item[index].Taxable == true ? 'lightblue' : 'red'
                            }}
                                className={this.state.Item[index].Taxable == true ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"} onClick={() => {
                                    let list = this.state.Item;
                                    list[index].Taxable = !list[index].Taxable;
                                    if (list[index].Taxable === true) {
                                        list[index].Tax = parseFloat((list[index].Qty * list[index].PPU * (parseFloat(this.state.Tax) / 100)).toFixed(2));
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }
                                    else {
                                        list[index].Tax = 0;
                                        list[index].Amount = parseFloat(list[index].Tax + list[index].Cost);
                                    }

                                    // console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="tax">Tax</button>

                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                width: '69px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className={this.state.Item[index].Process === '0' ? "btn btn-outline-danger btn-sm" : "btn btn-outline-success btn-sm"} onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Process === '0') {
                                        list[index].Process = '1';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Process</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                width: '65px',
                                height: '29px',
                                fontSize: '14px',
                            }}
                                className={
                                    this.state.Item[index].Status === '0' ? "btn btn-outline-warning btn-sm" : this.state.Item[index].Status === '1' ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"
                                } onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].Status === '0') {
                                        list[index].Status = '1';
                                        this.setState({ Item: list });
                                    }
                                    else if (list[index].Status === '1') {
                                        list[index].Status = '-1';
                                        list[index].Process = '0';
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].Status = '0';
                                        this.setState({ Item: list });
                                    }
                                }} title="process">Status</button>
                            <button style={{
                                marginTop: '3px',
                                marginLeft: '5px',
                                fontSize: '14px',
                                width: '65px',
                                height: '29px',
                                // backgroundColor: this.state.Item[index].pano === "true" ? 'lightblue' : 'red'
                            }}
                                className={this.state.Item[index].pano === "true" ? "btn btn-outline-success btn-sm" : "btn btn-outline-danger btn-sm"}
                                onClick={() => {
                                    let list = this.state.Item;
                                    if (list[index].pano === "true") {
                                        list[index].pano = "false";
                                        this.setState({ Item: list });
                                    }
                                    else {
                                        list[index].pano = "true";
                                        this.setState({ Item: list });
                                    }
                                    // console.log(list[index].Taxable);
                                    this.setState({ Item: list });
                                }} title="pano">Is360</button>
                            <Component.itemModal item={this.state.Item} each={value} index={index} updateItemList={this.updateItemList.bind(this)} Tax={this.state.Tax} />
                            <button
                                style={{
                                    // paddingTop: '20px',
                                    marginTop: '3px',
                                    marginLeft: '5px',
                                    width: '76px',
                                    height: '29px',
                                    fontSize: '14px',
                                }}
                                className="btn btn-info btn-sm"
                                title="downloaditempics" onClick={this.downloadItemPics.bind(this, this.state.Item[index])}>ItemPics</button>
                        </div>
                    </div>
                    <div className="card-body">
                        <React.Fragment>
                            <table style={{ width: "100%" }}>
                                <thead>
                                    <tr key={index}>
                                        <th style={{ width: "10%" }}>Category</th>
                                        <th style={{ width: "4%" }}>Item</th>
                                        <th style={{ width: "50%" }}>Description</th>
                                        <th>UM</th>
                                        <th>QTY</th>
                                        <th>PPU</th>
                                        <th>Tax</th>
                                        <th style={{ width: "8%" }}>Amount</th>
                                        <th style={{ width: "8%" }}>SubAmount</th>
                                        {/* <th>Process</th>
                                    <th>Status</th> */}
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr key={index}>
                                        <td>{value.Cate}</td>
                                        <td>{value.Item}</td>
                                        <td>{value.description}<div>{value.description_cn}</div></td>
                                        <td>{value.UM}</td>
                                        <td>{value.Qty}</td>
                                        <td>{value.PPU}</td>
                                        <td>{value.Tax}</td>
                                        <td>{value.Amount}</td>
                                        <td>{value.SubCost}</td>
                                        {/* <td>{this.showProcess(value.Process)}</td>
                                        <td>{this.showStatus(value.Status)}</td> */}
                                    </tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={9}>Before </th></tr>
                                    <tr><td style={{ borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={9}>{this.mapPicture(value.Before, value.description, value.Comments)}</td></tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF" }} colSpan={9}> During </th></tr>
                                    <tr><td style={{ borderBottom: "#FFFFFF", borderTop: "#FFFFFF" }} colSpan={9}>{this.mapPicture(value.During, value.description, value.Comments)}</td></tr>
                                    <tr><th style={{ textAlign: "center", borderBottom: "#FFFFFF" }} colSpan={9}> After </th></tr>
                                    <tr><td style={{ borderTop: "#FFFFFF" }} colSpan={9}>{this.mapPicture(value.After, value.description, value.Comments)}</td></tr>
                                    {/* <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}}colSpan={6}>Before </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}} colSpan={6}>{this.mapPicture(value.Before, value.description, value.Comments)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF"}} colSpan={6}> During </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderBottom:"#FFFFFF", borderTop:"#FFFFFF"}}colSpan={6}>{this.mapPicture(value.During, value.description, value.Comments)}</td></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><th style={{textAlign:"center",borderBottom:"#FFFFFF"}}colSpan={6}> After </th></tr>
                                    <tr><td style={{ borderLeftColor: "#FFFFFF", borderBottomColor: "#FFFFFF" }}>&nbsp;</td><td style={{borderTop:"#FFFFFF"}}colSpan={6}>{this.mapPicture(value.After, value.description, value.Comments)}</td></tr> */}
                                </tbody></table>
                        </React.Fragment>
                    </div>
                </div>
            </div>
        )
    }




    protected mapPicture(picture: any[], desc: string, descCN: string) {
        if (localStorage.getItem("Authority") === '0') {
            return (
                picture.map(function (item, key) {
                    return (
                        <div key={key} style={{
                            // position: 'flex',
                            flex: 1,
                            // float:"left"
                            width: "20%",
                            display: "inline-block"
                        }}>
                            <div>
                                <img style={{
                                    width: '80%',
                                    height: 'auto',
                                    padding: '3px'
                                }}
                                    src={item.Src}
                                    onClick={this.convert360.bind(this, item)}
                                />
                                <div style={{ width: "97%" }}>{key + 1}.{desc}</div>
                            </div>

                        </div>
                    )
                }.bind(this))
            )
        }
        else {

            return (
                picture.map(function (item, key) {
                    if (item.ImageID) {
                        return (
                            <div key={key} style={{
                                // position: 'flex',
                                flex: 1,
                                // float:"left"
                                width: "20%",
                                display: "inline-block"
                            }}>
                                <div>
                                    <img style={{
                                        width: '80%',
                                        height: 'auto',
                                        padding: '3px'
                                    }}
                                        src={item.Src}
                                        onClick={this.convert360.bind(this, item)}
                                    />
                                    <div style={{ width: "97%" }}>{key + 1}.{desc}{descCN ? "/" + descCN : ""}</div>
                                </div>

                            </div>
                        )
                    }
                    else {
                        return (
                            <div key={key} style={{
                                // position: 'flex',
                                flex: 1,
                                // float:"left"
                                width: "20%",
                                display: "inline-block"
                            }}>
                                <div>
                                    <img style={{
                                        width: '80%',
                                        height: 'auto',
                                        padding: '3px'
                                    }}
                                        src={item.Src}

                                    />
                                    <div style={{ width: "90%" }}>{key + 1}.{desc}{descCN ? "/" + descCN : ""}</div>
                                </div>

                            </div>
                        )
                    }

                }.bind(this))
            )
        }
    }

    protected submit360() {
        let list = this.state.Item;
        for (let i = 0; i < this.state.Markers.length; i++) {
            list.push({
                Cate: ".Marker",
                After: [],
                Amount: 0,
                During: [],
                Process: '0',
                Status: '0',
                Tax: 0,
                Taxable: true,
                description: this.state.Markers[i].Description,
                Comments: '',
                Item: (i + 1),
                Qty: 0,
                UM: '',
                PPU: 0,
                Cost: 0,
                SubPPU: 0,
                SubCost: 0,
                completeness: "0",
                Before: [],
                Pano: "false",
                description_cn: "",
            })
        }
        this.setState({ Item: list })
        $.ajax({
            url: 'https://rpntechserver.appspot.com/updateMarker?image_id=' + this.state.currImgID,
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'POST',
            datatype: "json",
            data: JSON.stringify({
                markers: this.state.Markers
            }),
            success: (function (result) {
                // console.log(result);
                window.alert("360 Markers saved successfully!")
            }).bind(this),

        })
    }
    protected convert360(pic) {
        this.setState({ currImgID: pic.ImageID });
        this.setState({ currImgSrc: pic.Src })

        var modal = document.getElementById('sphere');

        // Get the button that opens the modal


        // Get the <span> element that closes the modal
        var span = document.getElementsByClassName("closep")[0];

        // When the user clicks the button, open the modal 
        modal.style.display = "block";

        let div = document.getElementById('spherepic');
        let PSV;
        $.ajax({
            url: "https://rpntechserver.appspot.com/findImageMarkerByImageID?imageID=" + pic.ImageID,
            method: 'GET',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            // data: test,
            success: function (data) {
                // console.log(data)
                this.setState({ Markers: data.Markers })
                // console.log(this.state.Markers);
                PSV = new PhotoSphereViewer({
                    panorama: pic.Src,
                    container: div,
                    time_anim: false,
                    navbar: true,
                    navbar_style: {
                        backgroundColor: "silver",
                    },
                    markers: (function () {
                        var marlist = [];
                        for (let i = 0; i < this.state.Markers.length; i++) {
                            marlist.push({
                                id: this.state.Markers[i].singleMarkID,
                                longitude: this.state.Markers[i].coord_y,
                                latitude: this.state.Markers[i].CoordinateX,
                                image: "https://cdn4.iconfinder.com/data/icons/peppyicons/512/660011-location-512.png",
                                width: 32,
                                height: 32,
                                tooltip: (i + 1) + '. ' + this.state.Markers[i].Description,
                                content: this.state.Markers[i].Description,
                                data: {
                                    generated: true
                                }
                            })
                        };
                        return marlist;
                    }.bind(this)()),
                })
                PSV.on('click', function (e) {
                    let createMar = {
                        id: '#' + Math.random(),
                        tooltip: this.state.Markers.Description,
                        longitude: e.longitude,
                        latitude: e.latitude,
                        image: "https://cdn4.iconfinder.com/data/icons/peppyicons/512/660011-location-512.png",
                        content: "",
                        // content:this.edit360marker(),
                        width: 32,
                        height: 32,
                        anchor: 'bottom center',
                        data: {
                            generated: true
                        }
                    }
                    PSV.addMarker(createMar);
                    let tempMar = this.state.Markers;
                    let item = this.state.Item;
                    tempMar.push({
                        CoordinateX: createMar.latitude,
                        Description: "",
                        coord_y: createMar.longitude,
                        singleMarkID: createMar.id
                    })
                    this.setState({ Markers: tempMar });
                    // console.log(this.state.Markers);
                }.bind(this));

                /**
                 * Delete a generated marker when the user clicks on it
                 */
                PSV.on('select-marker', function (marker, dblclick) {
                    if (marker.data && marker.data.generated) {
                        if (dblclick) {
                            let rmid = PSV.getCurrentMarker(marker).id
                            console.log(rmid);
                            let temp = this.state.Markers;
                            if (temp.length == 1) {
                                temp = [];
                            }
                            else {
                                for (let i = 0; i < temp.length; i++) {

                                    if (temp[i].singleMarkID === rmid) {
                                        temp.splice(i, 1);
                                        break;
                                    }
                                }
                            }

                            this.setState({ Markers: temp })
                            PSV.removeMarker(marker);
                        }
                    }
                }.bind(this));
                // When the user clicks anywhere outside of the modal, close it
                window.onclick = function (event) {
                    if (event.target == span) {
                        PSV.destroy();
                        modal.style.display = "none";
                    }
                }
            }.bind(this),
        })
    }

    protected generateURL() {
        window.alert(this.state.currImgSrc);
    }

    protected showProcess(value) {
        if (value === '0') {
            return (<div>Incomplete</div>);
        }
        else {
            return (<div>Complete</div>);
        }
    }

    protected showStatus(value) {
        if (value === '0') {
            return "Unknown";
        }
        else if (value === '1') {
            return 'Approved';
        }
        else {
            return "Pushback";
        }
    }

    protected downloadItemPics(item) {
        let itempics = item.Before.concat(item.During, item.After);
        let pics = [];
        for (let i = 0; i < itempics.length; i++) {
            pics.push(itempics[i].Src)
        }

        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        resetMessage();
        var zip = new JSZip();

        // find every checked item
        pics.forEach(function (url) {
            // console.log(url);
            var filename = url.replace(/.*\//g, "") + ".jpg";
            zip.file(filename, urlToPromise(url), { binary: true });
        });
        var add = this.state.Address
        // when everything has been downloaded, we can trigger the dl
        zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
            var msg = "progression : " + metadata.percent.toFixed(2) + " %";
            if (metadata.currentFile) {
                msg += ", current file = " + metadata.currentFile;
            }
            showMessage(msg);
        })
            .then(function callback(blob) {

                FileSaver.saveAs(blob, add + "_" + item.Cate + item.Item + ".zip");
                showMessage("done !");
            }, function (e) {
                showError(e);
            });

        return false;
    }
    protected showTopBar() {
        return (
            <div className="topBar">
                <div className="searchBox">
                    <div className="input-group"
                        style={{
                            width: "50%",
                            paddingTop: "20px",
                            marginLeft: "40px",
                            // border:"1px solid black"
                        }}>
                        <input type="text" className="form-control bg-light border-0 small" placeholder="Search for Addr..." aria-label="Search" aria-describedby="basic-addon2"></input>
                        <div className="input-group-append">
                            <button className="btn btn-primary" type="button">
                                <i className="fas fa-search fa-sm"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div className="profileBox">
                    <div style={{
                        paddingTop: "5%"
                    }}>
                        <button className="link" style={{
                            width: "180px",
                            float: "right",
                            backgroundColor: "Transparent",
                            border: "none",
                            outline: "none"
                        }}>
                            <span style={{
                                color: "#616161"
                            }} className="mr-2 d-none d-lg-inline text-gray-600">Tim Yuan</span>
                            <img style={{
                                width: "20%"
                            }} className="img-profile rounded-circle" src={logo} />
                        </button>
                    </div>

                </div>
            </div>
        )
    }
    protected showLeftBar(TotalAmount: any) {
        return (
            <div style={{ position: "fixed" }} className="wrapper">
                <div className="sidebar">
                    <div className="sidebar-header">
                        <button style={{
                            width: "100%",
                            backgroundColor: "Transparent",
                            border: "none",
                        }}>
                            <div className="logo">
                                <img style={{
                                    width: "100%"
                                }} src={logo} />
                            </div>
                            <div className="rpnname">
                                RPN Company
                            </div>
                        </button>
                    </div>
                    <div className="sidebar-body">

                        <div style={{
                            borderBottom: "1px solid #E5E5E5"
                        }} className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="link" style={{
                                    width: "100%",
                                    backgroundColor: "Transparent",
                                    border: "none",
                                    outline: "none"
                                }} onClick={function () { this.props.history.push("/main") }.bind(this)}>
                                    <div className="body-icon"><i style={{ color: "#616161" }} className="fas fa-tasks"></i></div>
                                    <div className="body-text">Dashboard</div>
                                </button>
                            </div>
                        </div>
                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    width: "100%",
                                }} onClick={this.submit.bind(this, TotalAmount)}>Submit</button>
                            </div>
                        </div>
                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-info" style={{
                                    float: "left",
                                    width: "46%",
                                }} onClick={this.changeChecklist}> CheckList</button>
                                <button className="btn btn-primary" style={{
                                    width: "46%",
                                    float: "right"
                                }} onClick={() => this.setState({ duplicateModal: true })}>Duplicate</button>
                            </div>

                        </div>

                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    float: "left",
                                    width: "46%",
                                }} onClick={() => this.props.history.push("/printTask")}>PhotoPDF</button>
                                <button className="btn btn-primary" style={{
                                    width: "46%",
                                    float: "right"
                                }} onClick={() => this.props.history.push("/printText")}>TextPDF</button>

                            </div>

                        </div>
                        <select style={{ marginTop: "10px" }} id='setStage' className="form-control" onChange={e => this.VRMCheckList(e.target.value)}>
                            <option value="-1">VRM</option>
                            <option value='0'>InitialService</option>
                            <option value='1'>Bi-Weekly</option>
                            <option value='2'>Winterization</option>
                        </select>

                        <div className="sidebar-body-action">
                            <div style={{ paddingTop: "5%" }}>
                                <button className="btn btn-primary" style={{
                                    float: "left",
                                    width: "46%",
                                }} onClick={this.addWHP}>AddWHP</button>
                                <button className="btn btn-primary" style={{
                                    width: "46%",
                                    float: "right",
                                    // marginLeft:"5px"
                                }}>DelMark</button>
                            </div>
                        </div>

                        <div style={{
                            // borderBottom: "1px solid #E5E5E5"
                        }} className="sidebar-body-action">
                            <Dropdown style={{ paddingTop: "5%" }} isOpen={this.state.pictureDDropdown} toggle={function () { this.setState({ pictureDDropdown: !this.state.pictureDDropdown }) }.bind(this)}>
                                <DropdownToggle style={{ width: "100%" }} caret>
                                    DownloadPics
                                </DropdownToggle>
                                <DropdownMenu>
                                    <button onClick={this.downloadPics.bind(this, "Before")} className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5", borderTop: "1px solid #E5E5E5" }}>Before</button>
                                    <button onClick={this.downloadPics.bind(this, "During")} className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5" }}>During</button>
                                    <button onClick={this.downloadPics.bind(this, "After")} className="btn btn-secondary" style={{ width: "100%", margin: "auto", border: "none", borderBottom: "1px solid #E5E5E5" }}>After</button>
                                </DropdownMenu>
                            </Dropdown>
                        </div>

                        {this.showStage()}
                        <select value={this.state.Version} style={{ marginTop: "10px" }} id='setStage' className="form-control" onChange={e => this.findPrevVersion(e.target.value)}>
                            {this.state.versionArray.map(function (item, index) {
                                return (<option style={{ color: item.Status === '0' ? "#A00A0A" : "#18A409" }} key={index} value={item.Version}>{item.Version + this.state.VersionSize}-{this.showCurrStage(item.Stage)}</option>)
                            }.bind(this))}
                        </select>
                        <div style={{ marginTop: "10px", overflow: "auto", height: this.height, boxShadow: "0 0 35px 10px #EBEDEF inset" }} className="sidebar-body-action">
                            {this.state.Item.map(function (item, index) {
                                return (
                                    <div key={index}><button className="btn btn-link btn-sm" style={{ color: this.stageColor(item) }} onClick={this.scrollToAnchor.bind(this, index)}>{item.Cate}-{item.Item}</button></div>
                                )
                            }.bind(this))}
                        </div>

                    </div>
                </div>
            </div>

        )
    }

    protected VRMCheckList(stage) {
        if (stage === '0') {
            let list = this.state.Item;
            for (let i = 0; i < VRM.InitialService.length; i++) {
                list.push(VRM.InitialService[i]);
            }
            this.setState({ Item: list })
        }
        else if (stage === '1') {
            let list = this.state.Item;
            for (let i = 0; i < VRM.BiWeekly.length; i++) {
                list.push(VRM.BiWeekly[i]);
            }
            this.setState({ Item: list })
        }
        else if (stage === '2') {
            let list = this.state.Item;
            for (let i = 0; i < VRM.Winterization.length; i++) {
                list.push(VRM.Winterization[i]);
            }
            this.setState({ Item: list })
        }
        else {

        }
    }
    protected changeChecklist() {
        this.props.history.push("/checklist");
    }

    protected downloadPics(type: string) {
        function resetMessage() {
            $("#result")
                .removeClass()
                .text("");
        }
        /**
         * show a successful message.
         * @param {String} text the text to show.
         */
        function showMessage(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-success")
                .text(text);
        }
        /**
         * show an error message.
         * @param {String} text the text to show.
         */
        function showError(text) {
            resetMessage();
            $("#result")
                .addClass("alert alert-danger")
                .text(text);
        }


        function urlToPromise(url) {
            // console.log(url)
            return new Promise(function (resolve, reject) {
                JSZipUtils.getBinaryContent(url, function (err, data) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(data);
                    }
                });
            });
        }
        if (type === 'Before') {
            resetMessage();
            var zip = new JSZip();
            var urls = this.state.Before;
            // find every checked item
            urls.forEach(function (url) {
                console.log(url);
                var filename = url.replace(/.*\//g, "") + ".jpg";
                zip.file(filename, urlToPromise(url), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
                showMessage(msg);
            })
                .then(function callback(blob) {

                    FileSaver.saveAs(blob, add + "-Before.zip");
                    showMessage("done !");
                }, function (e) {
                    showError(e);
                });

            return false;
        }
        else if (type === 'During') {
            resetMessage();
            var zip = new JSZip();
            var urls = this.state.During;
            // find every checked item
            urls.forEach(function (url) {
                // console.log(url);
                var filename = url.replace(/.*\//g, "") + ".jpg";
                zip.file(filename, urlToPromise(url), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
                showMessage(msg);
            })
                .then(function callback(blob) {

                    FileSaver.saveAs(blob, add + "-During.zip");
                    showMessage("done !");
                }, function (e) {
                    showError(e);
                });

            return false;
        }
        else if (type === 'After') {
            resetMessage();
            var zip = new JSZip();
            var urls = this.state.After;
            // find every checked item
            urls.forEach(function (url) {
                // console.log(url);
                var filename = url.replace(/.*\//g, "") + ".jpg";
                zip.file(filename, urlToPromise(url), { binary: true });
            });
            var add = this.state.Address
            // when everything has been downloaded, we can trigger the dl
            zip.generateAsync({ type: "blob" }, function updateCallback(metadata) {
                var msg = "progression : " + metadata.percent.toFixed(2) + " %";
                if (metadata.currentFile) {
                    msg += ", current file = " + metadata.currentFile;
                }
                showMessage(msg);
            })
                .then(function callback(blob) {

                    FileSaver.saveAs(blob, add + "-After.zip");
                    showMessage("done !");
                }, function (e) {
                    showError(e);
                });

            return false;
        }
        else {

        }



    }

    protected deleteMarkerList() {
        let list = this.state.Item;
        let temp = [];
        for (let i = 0; i < list.length; i++) {
            if (list[i].Cate.includes(".Marker")) {
            }
            else {
                temp.push(list[i]);
            }
        }
        this.setState({ Item: temp });
    }

    protected findPrevVersion(version: any) {
        let current = version
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findPrevTask?shared_id=' + this.state.SharedID + "&version=" + current,
            method: 'GET',
            datatype: "json",
            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },

            success: function (result) {
                // this.setState({ City: result.City })
                // this.setState({ Address: result.Address });
                // this.setState({ Area: result.Area });
                // this.setState({ BillTo: result.BillTo });
                // this.setState({ CompletionDate: result.CompletionDate });
                // this.setState({ Desc: result.Desc });
                // this.setState({ DescCN: result.DescCN });
                // this.setState({ Invoice: result.Invoice });
                // this.setState({ DueDate: result.DueDate });
                // this.setState({ InvoiceDate: result.InvoiceDate });
                // this.setState({ Item: result.ItemList });
                // this.setState({ LBNum: result.KeyCode });
                // this.setState({ Note: result.Note });
                // this.setState({ Stage: result.Stage });
                // this.setState({ StartDate: result.StartDate });
                // this.setState({ Stories: result.Stories });
                // this.setState({ TotalCost: result.TotalCost });
                // this.setState({ TotalImage: result.TotalImage });
                // this.setState({ Year: result.Year });
                // this.setState({ AssetNum: result.asset_num });
                // this.setState({ uploadLink: result.upload_link });
                // result.Tax ? this.setState({ Tax: result.Tax }) : this.setState({ Tax: "0" })
                // this.setState({ Username: result.Username });
                // this.setState({ Client: result.Client });
                // this.setState({ TaskStatus: result.TaskStatus });
                // this.setState({ CheckList: result.CheckList });
                // this.setState({ Comment: result.Comment });
                // this.setState({ ClientIcon: result.ClientIcon })
                // this.setState({
                //     Progress: result.Progress,
                //     Version: result.Version,
                //     VersionSize: result.VersionSize,
                //     SharedID: result.SharedID,
                //     DupDescription: result.Desc,

                // })
                localStorage.setItem("currTask", result.TaskID)
                // let temp = []
                // for (let i = result.VersionSize; i > 0; i--) {
                //     temp.push(i);
                // }
                // console.log(temp)
                // this.setState({ versionArray: temp })
                window.location.reload()
            }.bind(this),
        });
    }


    protected submit(TotalAmount) {
        let mark = 1;
        let Progress = 0;
        for (let i = 0; i < this.state.Item.length; i++) {
            if (this.state.Item[i].Process !== '1' || this.state.Item[i].Status !== '1') {
                mark = 0;
                break;
            }
        }

        if (mark == 1) {

            this.setState({ TaskStatus: "1" }, () => {
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask") + "&shared_id=" + this.state.SharedID,

                    method: 'POST',
                    datatype: "json",
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: JSON.stringify({
                        Address: this.state.Address,
                        Area: this.state.Area,
                        billTo: this.state.BillTo,
                        City: this.state.City,
                        CompletionDate: this.state.CompletionDate,
                        Desc: this.state.Desc,
                        DescCN: this.state.DescCN,
                        Invoice: this.state.Invoice,
                        InvoiceDate: this.state.InvoiceDate,
                        DueDate: this.state.DueDate,
                        ItemList: this.state.Item,
                        KeyCode: this.state.LBNum,
                        Note: this.state.Note,
                        Stage: this.state.Stage,
                        StartDate: this.state.StartDate,
                        Stories: this.state.Stories,
                        TotalImage: this.state.TotalImage,
                        Year: this.state.Year,
                        asset_num: this.state.AssetNum,
                        upload_link: this.state.uploadLink,
                        Tax: this.state.Tax,
                        Username: this.state.Username,
                        TaskStatus: this.state.TaskStatus,
                        Client: this.state.Client,
                        CheckList: this.state.CheckList,
                        Comment: this.state.Comment,
                        ClientIcon: this.state.ClientIcon,
                        Version: this.state.Version,
                        Progress: this.state.Progress,
                        VersionSize: this.state.VersionSize,
                        TotalCost: TotalAmount.toString(),
                        Vendor: this.state.Vendor,
                        ClientApproPDF: this.state.ClientApproval,
                        OtherPDF: this.state.Other,
                        SubInvoicePDF: this.state.SubInvoice,
                        sub_work_order_pdf: this.state.SubWorkOrder
                    }),
                    success: function (data) {
                        alert("Submit Successfully!")
                        window.location.reload()
                    }.bind(this),
                });
            });
        }
        else {
            this.setState({ TaskStatus: "0" }, () => {
                $.ajax({
                    url: 'https://rpntechserver.appspot.com/updateTask?task_id=' + localStorage.getItem("currTask") + "&shared_id=" + this.state.SharedID,
                    method: 'POST',
                    datatype: "json",
                    headers: {
                        Authorization: "Bearer " + localStorage.getItem('Token'),
                    },
                    data: JSON.stringify({
                        Address: this.state.Address,
                        Area: this.state.Area,
                        billTo: this.state.BillTo,
                        City: this.state.City,
                        CompletionDate: this.state.CompletionDate,
                        Desc: this.state.Desc,
                        DescCN: this.state.DescCN,
                        Invoice: this.state.Invoice,
                        InvoiceDate: this.state.InvoiceDate,
                        DueDate: this.state.DueDate,
                        ItemList: this.state.Item,
                        KeyCode: this.state.LBNum,
                        Note: this.state.Note,
                        Stage: this.state.Stage,
                        StartDate: this.state.StartDate,
                        Stories: this.state.Stories,
                        TotalImage: this.state.TotalImage,
                        Year: this.state.Year,
                        asset_num: this.state.AssetNum,
                        upload_link: this.state.uploadLink,
                        Tax: this.state.Tax,
                        Username: this.state.Username,
                        TaskStatus: this.state.TaskStatus,
                        Client: this.state.Client,
                        ClientIcon: this.state.ClientIcon,
                        CheckList: this.state.CheckList,
                        Comment: this.state.Comment,
                        Version: this.state.Version,
                        Progress: this.state.Progress,
                        VersionSize: this.state.VersionSize,
                        TotalCost: TotalAmount.toString(),
                        Vendor: this.state.Vendor,
                        ClientApproPDF: this.state.ClientApproval,
                        OtherPDF: this.state.Other,
                        SubInvoicePDF: this.state.SubInvoice,
                        sub_work_order_pdf: this.state.SubWorkOrder
                    }),
                    success: function (data) {
                        alert("Submit Successfully!")
                        window.location.reload()
                    }.bind(this),
                });
            });
        }
    }

    protected stageColor(item: any) {
        if (item.Process === '0') {
            return "#A00A0A"
        }
        else if (item.Process === '1' && item.Status != '1') {
            return "#FFC107"
        }
        else {
            return "#18A409"
        }
    }

    protected scrollToAnchor(index: number) {
        let anchorElement = document.getElementById("each" + index);
        anchorElement.scrollIntoView({})

    }
}

export default PageGhotiEdittask;
