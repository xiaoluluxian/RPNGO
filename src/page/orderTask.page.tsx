/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiOrderTask
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';
import * as $ from "jquery";
import * as fs from 'fs';

import Config from '../config/config';

export interface IProps {
    history: any,
}

export interface IState {

}

class PageGhotiOrderTask extends React.Component<IProps, IState> {
    height: number = 0
    state = {
        alluser: [],
        username: "",
        userTasks: [],
        selectedTask: {},
        selectedAddress:""
    }

    public componentDidMount() {
        $.ajax({
            url: 'https://rpntechserver.appspot.com/findAllUsers',

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                // console.log(result);
                this.setState({ alluser: result });
            }).bind(this),
        })
    }

    public constructor(props) {
        super(props);
        this.pushPage = this.pushPage.bind(this);
        this.showStage = this.showStage.bind(this);
        this.showStatus = this.showStatus.bind(this);
        this.selectTask = this.selectTask.bind(this);
        this.submit = this.submit.bind(this)
    }

    public render() {
        this.height = window.innerHeight * 0.65;
        return (
            <div className="page">
                <Component.leftBar page="register" pushPage={this.pushPage.bind(this)} />
                <Component.topBar page="register" pushPage={this.pushPage.bind(this)} />
                <div className="content" style={{ display: "fixed" }}>
                    <div style={{
                        color: "#283747",
                        fontWeight: "bold",
                        fontSize: "22px",
                        marginLeft: "15px",
                        marginTop: "5px"
                    }}>Order Task</div>
                    <div className="mainTable">
                        <div className="card shadow mb-4">
                            <div className="card-header py-3">  
                            <div style={{display:"inline-block"}}>
                                        <button onClick={this.submit} className="btn btn-primary btn-sm">Submit</button>
                                    </div>
                                    <div style={{display:"inline-block", marginLeft:"16px"}}>
                                        <label>Select User</label>
                                        <select style={{width:"50%"}}className="form-control" id='client' onChange={e => {this.changeUser(e.target.value)}}>
                                            <option>Choose User</option>
                                            {this.state.alluser ? this.state.alluser.map(function (item, key) {
                                                return (
                                                    <option key={key}>{item.Username}</option>
                                                )
                                            }.bind(this)) : <div></div>}
                                        </select>
                                    </div>
                                    <div style={{display:"inline-block"}}>
                                        <label>Selected Task:</label>
                                        <div>{this.state.selectedAddress}</div>
                                    </div>
                            </div>
                            <div style={{ height: this.height, overflow: "auto" }} className="card-body py-3">
                            <div style={{
                            overflowY: "auto",
                            height: this.height,
                            boxSizing: "border-box"

                        }} className="table-responsive">

                            <table className="tasktable" style={{
                                fontSize: "13px"
                            }}><thead style={{
                                // position:"absolute"
                            }}>

                                    <tr><th>Action</th>
                                        <th>Property Address</th>
                                        <th>Due Date</th>
                                        <th>CurrStage</th>
                                        <th>Status</th>
                                    </tr>
                                </thead>
                                <tbody style={{

                                }}>
                                    {this.state.userTasks ? this.state.userTasks.map(function (item, key) {
                                        return (
                                            <tr style={{ height: "5px" }} key={key}>
                                                <td style={{ height: "5px" }}>
                                                    {this.state.selectedAddress?<button style={{
                                                        marginRight: '5px',
                                                        fontSize: "13px"
                                                        // marginTop: '5px'
                                                    }} title="edit" className="btn btn-info btn-sm" onClick={this.insertTask.bind(this,item,key)}><ins>Insert</ins></button>
                                                :<button style={{
                                                    marginRight: '5px',
                                                    fontSize: "13px"
                                                    // marginTop: '5px'
                                                }} title="edit" className="btn btn-primary btn-sm" onClick={this.selectTask.bind(this,item, key)}><ins>Select</ins></button>}
                                                </td>
                                                <td>
                                                    {item.Address}</td>
                                                <td>{item.DueDate ? item.DueDate[parseInt(item.Stage)] : void 0}</td>
                                                <td>{this.showStage(item.Stage)}</td>
                                                <td>{this.showStatus(item)}</td>
                                            </tr>
                                        )
                                    }.bind(this)) : void 0}
                                </tbody>
                            </table>

                        </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        );
    }

    protected submit(){
        if(this.state.selectedAddress){
            alert("You need insert task to submit")
        }
        else{
            let idList = []
            for(let i=0;i<this.state.userTasks.length;i++){
                idList.push(this.state.userTasks[i].SharedID)
            }
            console.log(idList)
            $.ajax({
                url: 'https://rpntechserver.appspot.com/updateUserTaskIds',
                headers: {
                    Authorization: "Bearer " + localStorage.getItem('Token'),
                },
                method: 'POST',
                datatype: "json",
                data: JSON.stringify({
                    Username:this.state.username,
                    taskIds: idList
                }),
                success: (function (result) {
                    alert("Successfully changed!!")
                }).bind(this),
            })
        }
    }

    protected insertTask(item, index){
        let list = this.state.userTasks
        list.splice(index,0,this.state.selectedTask)
        this.setState({
            selectedTask:{},
            selectedAddress:"",
            userTasks:list
        })
    }
    protected selectTask(item, index){
        let list = this.state.userTasks
        list.splice(index,1)
        this.setState({
            selectedTask:item,
            selectedAddress: item.Address,
            userTasks: list
        })
    }

    protected showStage(stage) {
        if (stage === "0") {
            return "Initial"
        }
        else if (stage === "1") {
            return "Bid"
        }
        else if (stage === "2") {
            return "Client Approval"
        }
        else if (stage === "3") {
            return "Work Order"
        }
        else if (stage === "4") {
            return "Quality Assurance"
        }
        else if (stage === "5") {
            return "Invoice"
        }
        else if (stage === '6') {
            return "Archived"
        }
        else {
            return "Terminated"
        }
    }
    protected showStatus(item) {
        if (item.TaskStatus === '0') {
            return (
                <button
                    style={{
                        marginTop: "5px",
                        fontSize: "13px"
                    }}
                    className="btn btn-outline-danger btn-sm disabled"
                    // onClick={this.changeStatus.bind(this, item)}
                    disabled>Incomplete</button>
            )
        }
        else if (item.TaskStatus === '1') {
            return (<button
                style={{
                    marginTop: "5px",
                    fontSize: "13px"
                }}
                className="btn btn-outline-success btn-sm disabled"
                // onClick={this.changeStatus.bind(this, item)}
                disabled>Complete</button>)
        }
        else {
            return (
                <button

                >?</button>
            )
        }
    }

    protected changeUser(user){
        $.ajax({
            url: 'https://rpntechserver.appspot.com/getTasksByUser?username='+user,

            headers: {
                Authorization: "Bearer " + localStorage.getItem('Token'),
            },
            method: 'GET',
            datatype: "json",
            data: JSON.stringify({
            }),
            success: (function (result) {
                console.log(result)
                this.setState({
                    userTasks:result,
                    username:user
                })
               
            }).bind(this),
        })
    }

    protected pushPage(page: String) {
        this.props.history.push(page)
    }
}

export default PageGhotiOrderTask;
