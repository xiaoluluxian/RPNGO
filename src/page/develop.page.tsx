/**
 * @author Tim
 * @overview generated by ghoti-cli
 * @fileoverview Page set PageGhotiDevelop
 */

import * as React from 'react';
import * as Component from '../component/import';
import * as Func from '../func/import';
import * as Lambda from '../lambda/import';

import Geosuggest from 'react-geosuggest'
import { withScriptjs, withGoogleMap, GoogleMap, Marker } from "react-google-maps"
import { MarkerWithLabel } from "react-google-maps/lib/components/addons/MarkerWithLabel"
// import {} from 'googlemaps';
import * as $ from "jquery";

import Config from '../config/config';
import {ColoradoJson} from "../config/ColoradoJson"

import USA from "@svg-maps/usa";
import { SVGMap } from "react-svg-map";

export interface IProps {

}

export interface IState {

}
declare const google: any;
// console.log(ColoradoJson)
// console.log(USA)


class PageGhotiDevelop extends React.Component<IProps, IState> {
    // MyMapComponent = withGoogleMap(props => (
    //     <GoogleMap
    //         defaultZoom={5}
    //         defaultCenter={{ lat: 38.8780025, lng: -93.09770200000003 }}
    //         onClick={this.addMarker}
    //     >
    //         {this.state.Marker ? this.state.Marker.map(function (marker, index) {
    //             return (<Marker onDblClick={this.deleteMarker.bind(this, index)} key={index} position={{ lat: marker.lat, lng: marker.lng }} />)
    //         }.bind(this)) : void 0}
    //     </GoogleMap>
    // ))
    state = {
        Marker: [],
        tooltipStyle: {
            display: "none",
        },
        pointedLocation: "",
        currMap:USA
    }


    public constructor(props) {
        super(props);

        // console.log(this.state)
        this.onSuggestSelect = this.onSuggestSelect.bind(this);
        this.deleteMarker = this.deleteMarker.bind(this);
        this.addMarker = this.addMarker.bind(this);
        this.handleLocationMouseMove = this.handleLocationMouseMove.bind(this)
        this.handleLocationMouseOver = this.handleLocationMouseOver.bind(this)
        this.handleLocationClick = this.handleLocationClick.bind(this)
    }

    public render() {
        return (<React.Fragment>
            {/* {console.log([1,2,3])} */}
            {/* <input onChange={e => this.uploadFile(e.target.files)} type="file"></input> */}
            {/* <div>
                <this.MyMapComponent
                    containerElement={<div style={{ height: "700px" }} />}
                    mapElement={<div style={{ height: "100%" }} />}
                />
            </div>
            <div>
                <Geosuggest
                    onSuggestSelect={this.onSuggestSelect}
                    location={null}
                />
            </div> */}
            <div style={{width:"50%"}}>
                {/* <SVGMap
                    map={this.state.currMap}
                    onLocationMouseMove={this.handleLocationMouseMove}
                    onLocationMouseOver={this.handleLocationMouseOver}
                    onLocationClick={this.handleLocationClick}
                /> */}
                <Component.SVGMap
                    
                    map={ColoradoJson}
                    onLocationClick={this.handleLocationClick}
                    onLocationMouseOver={this.handleLocationMouseOver}
                />
            </div>
        </React.Fragment>);
    }

    

    protected handleLocationMouseMove(event) {
        const tooltipStyle = {
            display: 'block',
            top: event.clientY + 10,
            left: event.clientX - 100
        };
        this.setState({ tooltipStyle: tooltipStyle });
    }

    protected handleLocationClick(event){
        // this.setState({currMap:ColoradoJson})
        console.log(event.target.attributes)
    }

    protected handleLocationMouseOver(event) {
        // const pointedLocation = event.target.attributes.name.value;
        // console.log(event)
        // this.setState({ pointedLocation: pointedLocation });
    }



    protected addMarker = (e) => {
        var temp = this.state.Marker;
        temp.push({
            lat: e.latLng.lat(),
            lng: e.latLng.lng()
        })
        // console.log(temp)
        this.setState({ Marker: temp })
    }

    protected deleteMarker(index: number) {

        var temp = this.state.Marker;
        temp.splice(index, 1);
        this.setState({ Marker: temp })
    }

    protected onSuggestSelect(place: any) {
        var temp = this.state.Marker
        temp.push({
            lat: place.location.lat,
            lng: place.location.lng
        })
        this.setState({ Marker: temp })
    }

    // protected uploadFile(file: FileList) {
    //     var f = file[0];

    //     var reader = new FileReader();
    //     var name = f.name;
    //     reader.onload = function (e: any) {
    //         var data = e.target.result;

    //         var workbook = XLSX.read(data, { type: 'binary' });
    //         var sheet = workbook.Sheets[workbook.SheetNames[0]];
    //         console.log(XLSX.utils.sheet_to_json(sheet));

    //         // console.log(workbook)
    //     };
    //     reader.readAsBinaryString(f);
    // }


}

export default PageGhotiDevelop;
